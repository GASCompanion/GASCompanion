{
  "ModuleName": "GASCompanion",
  "ModuleSourcePath": "Plugins/GASCompanion/Source/GASCompanion",
  "ModuleType": "Runtime",
  "Classes": [
    {
      "Name": "GSCPlayerControlsComponent",
      "IncludePath": "Components/GSCPlayerControlsComponent.h",
      "Description": "Modular pawn component for adding input actions and an optional input mapping to a pawn\n\nIf your Pawn is dealing with Abilities, use GSCAbilityInputBindingComponent instead.\n\nNot meant to be added in Blueprints but rather use as a base class (parent of GSCAbilityInputBindingComponent)",
      "Properties": [
        {
          "Name": "InputMappingContext",
          "DisplayName": "Input Mapping Context",
          "RawDescription": "Input Mapping Context:\r\nInput mapping to add to the input system",
          "RawShortDescription": "Input Mapping Context:\r\nInput mapping to add to the input system",
          "Tooltip": "Input mapping to add to the input system",
          "Description": "Input Mapping Context:\r\nInput mapping to add to the input system",
          "CPPType": "UInputMappingContext*",
          "CPPTypeForwardDeclaration": "class UInputMappingContext;",
          "Type": "UInputMappingContext*",
          "DisplayType": "UInputMappingContext*"
        },
        {
          "Name": "InputPriority",
          "DisplayName": "Input Priority",
          "RawDescription": "Input Priority:\r\nPriority to bind mapping context with",
          "RawShortDescription": "Input Priority:\r\nPriority to bind mapping context with",
          "Tooltip": "Priority to bind mapping context with",
          "Description": "Input Priority:\r\nPriority to bind mapping context with",
          "CPPType": "int32",
          "CPPTypeForwardDeclaration": "",
          "Type": "int32",
          "DisplayType": "int32"
        }
      ],
      "Events": [
        {
          "Name": "TeardownPlayerControls",
          "FullName": "Function /Script/GASCompanion.GSCPlayerControlsComponent:TeardownPlayerControls",
          "DisplayName": "Teardown Player Controls",
          "RawDescription": "Native/BP Event to undo control setup",
          "RawShortDescription": "Native/BP Event to undo control setup",
          "Description": "Native/BP Event to undo control setup",
          "Image": "GASCompanion/img/GSCPlayerControlsComponent_TeardownPlayerControls.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "PlayerInputComponent",
              "DisplayName": "Player Input Component",
              "RawDescription": "Player Input Component",
              "RawShortDescription": "Player Input Component",
              "Description": "",
              "CPPType": "UEnhancedInputComponent*",
              "CPPTypeForwardDeclaration": "class UEnhancedInputComponent;",
              "Type": "UEnhancedInputComponent*",
              "DisplayType": "UEnhancedInputComponent*"
            }
          ]
        },
        {
          "Name": "SetupPlayerControls",
          "FullName": "Function /Script/GASCompanion.GSCPlayerControlsComponent:SetupPlayerControls",
          "DisplayName": "Setup Player Controls",
          "RawDescription": "Native/BP Event to set up player controls",
          "RawShortDescription": "Native/BP Event to set up player controls",
          "Description": "Native/BP Event to set up player controls",
          "Image": "GASCompanion/img/GSCPlayerControlsComponent_SetupPlayerControls.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "PlayerInputComponent",
              "DisplayName": "Player Input Component",
              "RawDescription": "Player Input Component",
              "RawShortDescription": "Player Input Component",
              "Description": "",
              "CPPType": "UEnhancedInputComponent*",
              "CPPTypeForwardDeclaration": "class UEnhancedInputComponent;",
              "Type": "UEnhancedInputComponent*",
              "DisplayType": "UEnhancedInputComponent*"
            }
          ]
        }
      ],
      "Functions": []
    },
    {
      "Name": "GSCAbilityInputBindingComponent",
      "IncludePath": "Components/GSCAbilityInputBindingComponent.h",
      "Description": "Modular pawn component that hooks up enhanced input to the ability system input logic\n\nExtends from GSCPlayerControlsComponent, so if your Pawn is dealing with Abilities use this component instead.",
      "Properties": [
        {
          "Name": "TargetInputConfirm",
          "DisplayName": "Target Input Confirm",
          "RawDescription": "Target Input Confirm:\r\nInput action to handle Target Confirm for ASC",
          "RawShortDescription": "Target Input Confirm:\r\nInput action to handle Target Confirm for ASC",
          "Tooltip": "Input action to handle Target Confirm for ASC",
          "Description": "Target Input Confirm:\r\nInput action to handle Target Confirm for ASC",
          "CPPType": "UInputAction*",
          "CPPTypeForwardDeclaration": "class UInputAction;",
          "Type": "UInputAction*",
          "DisplayType": "UInputAction*"
        },
        {
          "Name": "TargetConfirmTriggerEvent",
          "DisplayName": "Target Confirm Trigger Event",
          "RawDescription": "Target Confirm Trigger Event:\r\nThe EnhancedInput Trigger Event type to use for the target confirm input.\n\n---\n\nThe most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button,\nand Triggered for continuous actions that happen every frame while holding an input\n\nWarning: The Triggered value should only be used for Input Actions that you know only trigger once. If your action\ntriggered event happens on every tick, this might lead to issues with abilities. When in doubt, use the default Started value.",
          "RawShortDescription": "Target Confirm Trigger Event:\r\nThe EnhancedInput Trigger Event type to use for the target confirm input.\n\n---\n\nThe most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button,\nand Triggered for continuous actions that happen every frame while holding an input\n\nWarning: The Triggered value should only be used for Input Actions that you know only trigger once. If your action\ntriggered event happens on every tick, this might lead to issues with abilities. When in doubt, use the default Started value.",
          "Tooltip": "The EnhancedInput Trigger Event type to use for the target confirm input.\n\n---\n\nThe most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button,\nand Triggered for continuous actions that happen every frame while holding an input\n\nWarning: The Triggered value should only be used for Input Actions that you know only trigger once. If your action\ntriggered event happens on every tick, this might lead to issues with abilities. When in doubt, use the default Started value.",
          "Description": "Target Confirm Trigger Event:\r\nThe EnhancedInput Trigger Event type to use for the target confirm input.\n\n---\n\nThe most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button,\nand Triggered for continuous actions that happen every frame while holding an input\n\nWarning: The Triggered value should only be used for Input Actions that you know only trigger once. If your action\ntriggered event happens on every tick, this might lead to issues with abilities. When in doubt, use the default Started value.",
          "CPPType": "EGSCAbilityTriggerEvent",
          "CPPTypeForwardDeclaration": "enum class EGSCAbilityTriggerEvent : uint8;",
          "Type": "EGSCAbilityTriggerEvent",
          "DisplayType": "EGSCAbilityTriggerEvent"
        },
        {
          "Name": "TargetInputCancel",
          "DisplayName": "Target Input Cancel",
          "RawDescription": "Target Input Cancel:\r\nInput action to handle Target Cancel for ASC",
          "RawShortDescription": "Target Input Cancel:\r\nInput action to handle Target Cancel for ASC",
          "Tooltip": "Input action to handle Target Cancel for ASC",
          "Description": "Target Input Cancel:\r\nInput action to handle Target Cancel for ASC",
          "CPPType": "UInputAction*",
          "CPPTypeForwardDeclaration": "class UInputAction;",
          "Type": "UInputAction*",
          "DisplayType": "UInputAction*"
        },
        {
          "Name": "TargetCancelTriggerEvent",
          "DisplayName": "Target Cancel Trigger Event",
          "RawDescription": "Target Cancel Trigger Event:\r\nThe EnhancedInput Trigger Event type to use for the target cancel input.\n\n---\n\nThe most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button,\nand Triggered for continuous actions that happen every frame while holding an input\n\nWarning: The Triggered value should only be used for Input Actions that you know only trigger once. If your action\ntriggered event happens on every tick, this might lead to issues with abilities. When in doubt, use the default Started value.",
          "RawShortDescription": "Target Cancel Trigger Event:\r\nThe EnhancedInput Trigger Event type to use for the target cancel input.\n\n---\n\nThe most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button,\nand Triggered for continuous actions that happen every frame while holding an input\n\nWarning: The Triggered value should only be used for Input Actions that you know only trigger once. If your action\ntriggered event happens on every tick, this might lead to issues with abilities. When in doubt, use the default Started value.",
          "Tooltip": "The EnhancedInput Trigger Event type to use for the target cancel input.\n\n---\n\nThe most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button,\nand Triggered for continuous actions that happen every frame while holding an input\n\nWarning: The Triggered value should only be used for Input Actions that you know only trigger once. If your action\ntriggered event happens on every tick, this might lead to issues with abilities. When in doubt, use the default Started value.",
          "Description": "Target Cancel Trigger Event:\r\nThe EnhancedInput Trigger Event type to use for the target cancel input.\n\n---\n\nThe most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button,\nand Triggered for continuous actions that happen every frame while holding an input\n\nWarning: The Triggered value should only be used for Input Actions that you know only trigger once. If your action\ntriggered event happens on every tick, this might lead to issues with abilities. When in doubt, use the default Started value.",
          "CPPType": "EGSCAbilityTriggerEvent",
          "CPPTypeForwardDeclaration": "enum class EGSCAbilityTriggerEvent : uint8;",
          "Type": "EGSCAbilityTriggerEvent",
          "DisplayType": "EGSCAbilityTriggerEvent"
        }
      ],
      "Events": [],
      "Functions": [
        {
          "Name": "SetInputBinding",
          "FullName": "Function /Script/GASCompanion.GSCAbilityInputBindingComponent:SetInputBinding",
          "DisplayName": "Set Input Binding",
          "RawDescription": "Updates the Ability Input Binding Component registered bindings or create a new one for the passed in Ability Handle.\n\n@param InputAction The Enhanced InputAction to bind to\n@param TriggerEvent The trigger type to use for the ability pressed handle. The most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button.\n@param AbilityHandle The Gameplay Ability Spec handle to setup binding for (handle returned when granting abilities manually with GSCAbilitySystemComponent)",
          "RawShortDescription": "Updates the Ability Input Binding Component registered bindings or create a new one for the passed in Ability Handle.\n\n@param InputAction The Enhanced InputAction to bind to\n@param TriggerEvent The trigger type to use for the ability pressed handle. The most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button.\n@param AbilityHandle The Gameplay Ability Spec handle to setup binding for (handle returned when granting abilities manually with GSCAbilitySystemComponent)",
          "Description": "Updates the Ability Input Binding Component registered bindings or create a new one for the passed in Ability Handle.",
          "Image": "GASCompanion/img/GSCAbilityInputBindingComponent_SetInputBinding.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "InputAction",
              "DisplayName": "Input Action",
              "RawDescription": "Input Action",
              "RawShortDescription": "Input Action",
              "Description": "The Enhanced InputAction to bind to",
              "CPPType": "UInputAction*",
              "CPPTypeForwardDeclaration": "class UInputAction;",
              "Type": "UInputAction*",
              "DisplayType": "UInputAction*"
            },
            {
              "Name": "TriggerEvent",
              "DisplayName": "Trigger Event",
              "RawDescription": "Trigger Event",
              "RawShortDescription": "Trigger Event",
              "Description": "The trigger type to use for the ability pressed handle. The most common trigger types are likely to be Started for actions that happen once, immediately upon pressing a button.",
              "CPPType": "EGSCAbilityTriggerEvent",
              "CPPTypeForwardDeclaration": "enum class EGSCAbilityTriggerEvent : uint8;",
              "Type": "EGSCAbilityTriggerEvent",
              "DisplayType": "EGSCAbilityTriggerEvent"
            },
            {
              "Name": "AbilityHandle",
              "DisplayName": "Ability Handle",
              "RawDescription": "Ability Handle",
              "RawShortDescription": "Ability Handle",
              "Description": "The Gameplay Ability Spec handle to setup binding for (handle returned when granting abilities manually with GSCAbilitySystemComponent)",
              "CPPType": "FGameplayAbilitySpecHandle",
              "CPPTypeForwardDeclaration": "struct FGameplayAbilitySpecHandle;",
              "Type": "FGameplayAbilitySpecHandle",
              "DisplayType": "FGameplayAbilitySpecHandle"
            }
          ]
        },
        {
          "Name": "GetBoundInputActionForAbility",
          "FullName": "Function /Script/GASCompanion.GSCAbilityInputBindingComponent:GetBoundInputActionForAbility",
          "DisplayName": "Get Bound Input Action for Ability",
          "RawDescription": "Given a Gameplay Ability, returns the bound InputAction from mapped abilities (previously bound abilities) that matches the Ability Spec InputID.\n\nDesigned to be called from within a Gameplay Ability event graph, passing self reference for the Gameplay Ability parameter.",
          "RawShortDescription": "Given a Gameplay Ability, returns the bound InputAction from mapped abilities (previously bound abilities) that matches the Ability Spec InputID.\n\nDesigned to be called from within a Gameplay Ability event graph, passing self reference for the Gameplay Ability parameter.",
          "Description": "Given a Gameplay Ability, returns the bound InputAction from mapped abilities (previously bound abilities) that matches the Ability Spec InputID.\n\nDesigned to be called from within a Gameplay Ability event graph, passing self reference for the Gameplay Ability parameter.",
          "Image": "GASCompanion/img/GSCAbilityInputBindingComponent_GetBoundInputActionForAbility.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "",
              "CPPType": "UGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "UGameplayAbility*",
              "DisplayType": "UGameplayAbility*"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "UInputAction*",
            "CPPTypeForwardDeclaration": "class UInputAction;",
            "Type": "UInputAction*",
            "DisplayType": "UInputAction*"
          }
        },
        {
          "Name": "ClearInputBinding",
          "FullName": "Function /Script/GASCompanion.GSCAbilityInputBindingComponent:ClearInputBinding",
          "DisplayName": "Clear Input Binding",
          "RawDescription": "Given a Gameplay Ability Spec handle (handle returned when granting abilities manually with GSCAbilitySystemComponent), clears up and reset the previously registered binding for that ability.",
          "RawShortDescription": "Given a Gameplay Ability Spec handle (handle returned when granting abilities manually with GSCAbilitySystemComponent), clears up and reset the previously registered binding for that ability.",
          "Description": "Given a Gameplay Ability Spec handle (handle returned when granting abilities manually with GSCAbilitySystemComponent), clears up and reset the previously registered binding for that ability.",
          "Image": "GASCompanion/img/GSCAbilityInputBindingComponent_ClearInputBinding.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AbilityHandle",
              "DisplayName": "Ability Handle",
              "RawDescription": "Ability Handle",
              "RawShortDescription": "Ability Handle",
              "Description": "",
              "CPPType": "FGameplayAbilitySpecHandle",
              "CPPTypeForwardDeclaration": "struct FGameplayAbilitySpecHandle;",
              "Type": "FGameplayAbilitySpecHandle",
              "DisplayType": "FGameplayAbilitySpecHandle"
            }
          ]
        },
        {
          "Name": "ClearAbilityBindings",
          "FullName": "Function /Script/GASCompanion.GSCAbilityInputBindingComponent:ClearAbilityBindings",
          "DisplayName": "Clear Ability Bindings",
          "RawDescription": "Given an Enhanced Input Action, clears up input binding delegates (On Pressed and Released) and resets any abilities' (that were bound to that action) InputId to none.",
          "RawShortDescription": "Given an Enhanced Input Action, clears up input binding delegates (On Pressed and Released) and resets any abilities' (that were bound to that action) InputId to none.",
          "Description": "Given an Enhanced Input Action, clears up input binding delegates (On Pressed and Released) and resets any abilities' (that were bound to that action) InputId to none.",
          "Image": "GASCompanion/img/GSCAbilityInputBindingComponent_ClearAbilityBindings.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "InputAction",
              "DisplayName": "Input Action",
              "RawDescription": "Input Action",
              "RawShortDescription": "Input Action",
              "Description": "",
              "CPPType": "UInputAction*",
              "CPPTypeForwardDeclaration": "class UInputAction;",
              "Type": "UInputAction*",
              "DisplayType": "UInputAction*"
            }
          ]
        }
      ]
    },
    {
      "Name": "GSCAbilityQueueComponent",
      "IncludePath": "Components/GSCAbilityQueueComponent.h",
      "Description": "Actor Component responsible for Ability Queueing.\n\nNote that with current implementation, ability activation must be manually handled in BP. Ability Queueing won't work\nfor abilities bound by input with GSCAbilityInputBinding.",
      "Properties": [
        {
          "Name": "OwnerPawn",
          "DisplayName": "Owner Pawn",
          "RawDescription": "Owner Pawn",
          "RawShortDescription": "Owner Pawn",
          "Tooltip": "",
          "Description": "Owner Pawn",
          "CPPType": "APawn*",
          "CPPTypeForwardDeclaration": "class APawn;",
          "Type": "APawn*",
          "DisplayType": "APawn*"
        },
        {
          "Name": "OwnerAbilitySystemComponent",
          "DisplayName": "Owner Ability System Component",
          "RawDescription": "Owner Ability System Component",
          "RawShortDescription": "Owner Ability System Component",
          "Tooltip": "",
          "Description": "Owner Ability System Component",
          "CPPType": "UAbilitySystemComponent*",
          "CPPTypeForwardDeclaration": "class UAbilitySystemComponent;",
          "Type": "UAbilitySystemComponent*",
          "DisplayType": "UAbilitySystemComponent*"
        },
        {
          "Name": "bAbilityQueueEnabled",
          "DisplayName": "Ability Queue Enabled",
          "RawDescription": "Ability Queue Enabled",
          "RawShortDescription": "Ability Queue Enabled",
          "Tooltip": "",
          "Description": "Ability Queue Enabled",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCAbilityQueueNotifyState",
      "IncludePath": "Animations/GSCAbilityQueueNotifyState.h",
      "Description": "Use this notify state to open and close the ability queue window for your montage.\n\nIf this montage is triggered from within a Gameplay Ability, any ability that is failing to\nactivate during this window will be queued for activation when the current active one ends.",
      "Properties": [
        {
          "Name": "bAllowAllAbilities",
          "DisplayName": "Allow All Abilities",
          "RawDescription": "Allow All Abilities:\r\nIf true, enable queueing of all abilities, otherwise only allow Abilities that are defined in AllowedAbilities array.",
          "RawShortDescription": "Allow All Abilities:\r\nIf true, enable queueing of all abilities, otherwise only allow Abilities that are defined in AllowedAbilities array.",
          "Tooltip": "If true, enable queueing of all abilities, otherwise only allow Abilities that are defined in AllowedAbilities array.",
          "Description": "Allow All Abilities:\r\nIf true, enable queueing of all abilities, otherwise only allow Abilities that are defined in AllowedAbilities array.",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "AllowedAbilities",
          "DisplayName": "Allowed Abilities",
          "RawDescription": "Allowed Abilities:\r\nThe set of Abilities that can be queued for this window (has no effect if bAllowAllAbilities is set to true)",
          "RawShortDescription": "Allowed Abilities:\r\nThe set of Abilities that can be queued for this window (has no effect if bAllowAllAbilities is set to true)",
          "Tooltip": "The set of Abilities that can be queued for this window (has no effect if bAllowAllAbilities is set to true)",
          "Description": "Allowed Abilities:\r\nThe set of Abilities that can be queued for this window (has no effect if bAllowAllAbilities is set to true)",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "class UGameplayAbility;",
          "Type": "TArray<UGameplayAbility>",
          "DisplayType": "Array of UGameplayAbility"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCAbilitySystemComponent",
      "IncludePath": "Abilities/GSCAbilitySystemComponent.h",
      "Description": "Revamped Ability System Component for 3.0.0\n\nThis one is meant to be attached in Blueprint (or via a GameFeature), although 4.27 still requires ASC and IAbilitySystemInterface to be implemented in cpp.",
      "Properties": [
        {
          "Name": "GrantedAbilities",
          "DisplayName": "Granted Abilities",
          "RawDescription": "Granted Abilities:\r\nList of Gameplay Abilities to grant when the Ability System Component is initialized",
          "RawShortDescription": "Granted Abilities:\r\nList of Gameplay Abilities to grant when the Ability System Component is initialized",
          "Tooltip": "List of Gameplay Abilities to grant when the Ability System Component is initialized",
          "Description": "Granted Abilities:\r\nList of Gameplay Abilities to grant when the Ability System Component is initialized",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FGSCAbilityInputMapping;",
          "Type": "TArray<FGSCAbilityInputMapping>",
          "DisplayType": "Array of FGSCAbilityInputMapping"
        },
        {
          "Name": "GrantedAttributes",
          "DisplayName": "Granted Attributes",
          "RawDescription": "Granted Attributes:\r\nList of Attribute Sets to grant when the Ability System Component is initialized, with optional initialization data",
          "RawShortDescription": "Granted Attributes:\r\nList of Attribute Sets to grant when the Ability System Component is initialized, with optional initialization data",
          "Tooltip": "List of Attribute Sets to grant when the Ability System Component is initialized, with optional initialization data",
          "Description": "Granted Attributes:\r\nList of Attribute Sets to grant when the Ability System Component is initialized, with optional initialization data",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FGSCAttributeSetDefinition;",
          "Type": "TArray<FGSCAttributeSetDefinition>",
          "DisplayType": "Array of FGSCAttributeSetDefinition"
        },
        {
          "Name": "GrantedEffects",
          "DisplayName": "Granted Effects",
          "RawDescription": "Granted Effects:\r\nList of GameplayEffects to apply when the Ability System Component is initialized (typically on begin play)",
          "RawShortDescription": "Granted Effects:\r\nList of GameplayEffects to apply when the Ability System Component is initialized (typically on begin play)",
          "Tooltip": "List of GameplayEffects to apply when the Ability System Component is initialized (typically on begin play)",
          "Description": "Granted Effects:\r\nList of GameplayEffects to apply when the Ability System Component is initialized (typically on begin play)",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "class UGameplayEffect;",
          "Type": "TArray<UGameplayEffect>",
          "DisplayType": "Array of UGameplayEffect"
        },
        {
          "Name": "bResetAbilitiesOnSpawn",
          "DisplayName": "Reset Abilities on Spawn",
          "RawDescription": "Reset Abilities on Spawn:\r\nSpecifically set abilities to persist across deaths / respawns or possessions (Default is true)\n\nWhen this is set to false, abilities will only be granted the first time InitAbilityActor is called. This is the default\nbehavior for ASC living on Player States (GSCModularPlayerState specifically).\n\nDo not set it true for ASC living on Player States if you're using ability input binding. Only ASC living on Pawns supports this.",
          "RawShortDescription": "Reset Abilities on Spawn:\r\nSpecifically set abilities to persist across deaths / respawns or possessions (Default is true)\n\nWhen this is set to false, abilities will only be granted the first time InitAbilityActor is called. This is the default\nbehavior for ASC living on Player States (GSCModularPlayerState specifically).\n\nDo not set it true for ASC living on Player States if you're using ability input binding. Only ASC living on Pawns supports this.",
          "Tooltip": "Specifically set abilities to persist across deaths / respawns or possessions (Default is true)\n\nWhen this is set to false, abilities will only be granted the first time InitAbilityActor is called. This is the default\nbehavior for ASC living on Player States (GSCModularPlayerState specifically).\n\nDo not set it true for ASC living on Player States if you're using ability input binding. Only ASC living on Pawns supports this.",
          "Description": "Reset Abilities on Spawn:\r\nSpecifically set abilities to persist across deaths / respawns or possessions (Default is true)\n\nWhen this is set to false, abilities will only be granted the first time InitAbilityActor is called. This is the default\nbehavior for ASC living on Player States (GSCModularPlayerState specifically).\n\nDo not set it true for ASC living on Player States if you're using ability input binding. Only ASC living on Pawns supports this.",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "bResetAttributesOnSpawn",
          "DisplayName": "Reset Attributes on Spawn",
          "RawDescription": "Reset Attributes on Spawn:\r\nSpecifically set attributes to persist across deaths / respawns or possessions (Default is true)\n\nWhen this is set to false, attributes are only granted the first time InitAbilityActor is called. This is the default\nbehavior for ASC living on Player States (GSCModularPlayerState specifically).\n\nSet it (or leave it) to true if you want attribute values to be re-initialized to their default values.",
          "RawShortDescription": "Reset Attributes on Spawn:\r\nSpecifically set attributes to persist across deaths / respawns or possessions (Default is true)\n\nWhen this is set to false, attributes are only granted the first time InitAbilityActor is called. This is the default\nbehavior for ASC living on Player States (GSCModularPlayerState specifically).\n\nSet it (or leave it) to true if you want attribute values to be re-initialized to their default values.",
          "Tooltip": "Specifically set attributes to persist across deaths / respawns or possessions (Default is true)\n\nWhen this is set to false, attributes are only granted the first time InitAbilityActor is called. This is the default\nbehavior for ASC living on Player States (GSCModularPlayerState specifically).\n\nSet it (or leave it) to true if you want attribute values to be re-initialized to their default values.",
          "Description": "Reset Attributes on Spawn:\r\nSpecifically set attributes to persist across deaths / respawns or possessions (Default is true)\n\nWhen this is set to false, attributes are only granted the first time InitAbilityActor is called. This is the default\nbehavior for ASC living on Player States (GSCModularPlayerState specifically).\n\nSet it (or leave it) to true if you want attribute values to be re-initialized to their default values.",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        }
      ],
      "Events": [],
      "Functions": [
        {
          "Name": "GrantAbility",
          "FullName": "Function /Script/GASCompanion.GSCAbilitySystemComponent:GrantAbility",
          "DisplayName": "Grant Ability",
          "RawDescription": "Grant Ability",
          "RawShortDescription": "Grant Ability",
          "Description": "Grant Ability",
          "Image": "GASCompanion/img/GSCAbilitySystemComponent_GrantAbility.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "",
              "CPPType": "TSubclassOf<UGameplayAbility> ",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "TSubclassOf<UGameplayAbility>",
              "DisplayType": "TSubclassOf<UGameplayAbility>"
            },
            {
              "Name": "bRemoveAfterActivation",
              "DisplayName": "Remove After Activation",
              "RawDescription": "Remove After Activation",
              "RawShortDescription": "Remove After Activation",
              "Description": "",
              "CPPType": "bool",
              "CPPTypeForwardDeclaration": "",
              "Type": "bool",
              "DisplayType": "bool"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "FGameplayAbilitySpecHandle",
            "CPPTypeForwardDeclaration": "struct FGameplayAbilitySpecHandle;",
            "Type": "FGameplayAbilitySpecHandle",
            "DisplayType": "FGameplayAbilitySpecHandle"
          }
        }
      ]
    },
    {
      "Name": "GSCAbilityTask_NetworkSyncPoint",
      "IncludePath": "Abilities/Tasks/GSCAbilityTask_NetworkSyncPoint.h",
      "Description": "Task for providing a generic sync point for client server (one can wait for a signal from the other)",
      "Properties": [],
      "Events": [
        {
          "Name": "OnSync",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCAbilityTask_NetworkSyncPoint:OnSync",
          "DisplayName": "On Sync",
          "RawDescription": "On Sync",
          "RawShortDescription": "On Sync",
          "Description": "On Sync",
          "Image": "GASCompanion/img/GSCAbilityTask_NetworkSyncPoint_OnSync.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": []
        }
      ],
      "Functions": []
    },
    {
      "Name": "GSCAttributeSet",
      "IncludePath": "Abilities/Attributes/GSCAttributeSet.h",
      "Description": "Contains basic Attributes used in most games, Health, Stamina, Mana.\nCharacters taking damage or using Mana or Stamina as a resource will use this AttributeSet.\n\nAttributes:\n\nHealth - How much current health the Character has\nMaxHealth - Maximum amount of Health for the Character\nHealthRegenRate - Backing attribute to determine the amount of health regenerated per Gameplay Effect period\n\nStamina - Mainly used as a resource for Abilities\nMaxStamina - Maximum amount of Stamina for the Character\nStaminaRegenRate - Backing attribute to get the amount of stamina regenerated when used by a Gameplay Effect\n\nMana - Mainly used as a resource for Abilities\nMaxMana - Maximum amount of Mana for the Character\nManaRegenRate - Backing attribute for mana regeneration\n\nDamage - Meta attribute used by DamageExecution or Gameplay Effect to calculate final damage, which then turns into -Health\nStaminaDamage - Meta attribute used by DamageExecution or Gameplay Effect to calculate final damage, which then turns into -Stamina",
      "Properties": [
        {
          "Name": "Health",
          "DisplayName": "Health",
          "RawDescription": "Health:\r\nCurrent Health, when 0 we expect owner to die unless prevented by an ability. Capped by MaxHealth.\nPositive changes can directly use this.\nNegative changes to Health should go through Damage meta attribute.",
          "RawShortDescription": "Health:\r\nCurrent Health, when 0 we expect owner to die unless prevented by an ability. Capped by MaxHealth.\nPositive changes can directly use this.\nNegative changes to Health should go through Damage meta attribute.",
          "Tooltip": "Current Health, when 0 we expect owner to die unless prevented by an ability. Capped by MaxHealth.\nPositive changes can directly use this.\nNegative changes to Health should go through Damage meta attribute.",
          "Description": "Health:\r\nCurrent Health, when 0 we expect owner to die unless prevented by an ability. Capped by MaxHealth.\nPositive changes can directly use this.\nNegative changes to Health should go through Damage meta attribute.",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        },
        {
          "Name": "MaxHealth",
          "DisplayName": "Max Health",
          "RawDescription": "Max Health:\r\nMaxHealth is its own attribute since GameplayEffects may modify it",
          "RawShortDescription": "Max Health:\r\nMaxHealth is its own attribute since GameplayEffects may modify it",
          "Tooltip": "MaxHealth is its own attribute since GameplayEffects may modify it",
          "Description": "Max Health:\r\nMaxHealth is its own attribute since GameplayEffects may modify it",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        },
        {
          "Name": "HealthRegenRate",
          "DisplayName": "Health Regen Rate",
          "RawDescription": "Health Regen Rate:\r\nHealth regen rate will passively increase Health every period",
          "RawShortDescription": "Health Regen Rate:\r\nHealth regen rate will passively increase Health every period",
          "Tooltip": "Health regen rate will passively increase Health every period",
          "Description": "Health Regen Rate:\r\nHealth regen rate will passively increase Health every period",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        },
        {
          "Name": "Stamina",
          "DisplayName": "Stamina",
          "RawDescription": "Stamina:\r\nCurrent stamina, used to execute abilities. Capped by MaxStamina.",
          "RawShortDescription": "Stamina:\r\nCurrent stamina, used to execute abilities. Capped by MaxStamina.",
          "Tooltip": "Current stamina, used to execute abilities. Capped by MaxStamina.",
          "Description": "Stamina:\r\nCurrent stamina, used to execute abilities. Capped by MaxStamina.",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        },
        {
          "Name": "MaxStamina",
          "DisplayName": "Max Stamina",
          "RawDescription": "Max Stamina:\r\nMaxStamina is its own attribute since GameplayEffects may modify it",
          "RawShortDescription": "Max Stamina:\r\nMaxStamina is its own attribute since GameplayEffects may modify it",
          "Tooltip": "MaxStamina is its own attribute since GameplayEffects may modify it",
          "Description": "Max Stamina:\r\nMaxStamina is its own attribute since GameplayEffects may modify it",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        },
        {
          "Name": "StaminaRegenRate",
          "DisplayName": "Stamina Regen Rate",
          "RawDescription": "Stamina Regen Rate:\r\nStamina regen rate will passively increase Stamina every period",
          "RawShortDescription": "Stamina Regen Rate:\r\nStamina regen rate will passively increase Stamina every period",
          "Tooltip": "Stamina regen rate will passively increase Stamina every period",
          "Description": "Stamina Regen Rate:\r\nStamina regen rate will passively increase Stamina every period",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        },
        {
          "Name": "Mana",
          "DisplayName": "Mana",
          "RawDescription": "Mana:\r\nCurrent Mana, used to execute special abilities. Capped by MaxMana.",
          "RawShortDescription": "Mana:\r\nCurrent Mana, used to execute special abilities. Capped by MaxMana.",
          "Tooltip": "Current Mana, used to execute special abilities. Capped by MaxMana.",
          "Description": "Mana:\r\nCurrent Mana, used to execute special abilities. Capped by MaxMana.",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        },
        {
          "Name": "MaxMana",
          "DisplayName": "Max Mana",
          "RawDescription": "Max Mana:\r\nMaxMana is its own attribute since GameplayEffects may modify it",
          "RawShortDescription": "Max Mana:\r\nMaxMana is its own attribute since GameplayEffects may modify it",
          "Tooltip": "MaxMana is its own attribute since GameplayEffects may modify it",
          "Description": "Max Mana:\r\nMaxMana is its own attribute since GameplayEffects may modify it",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        },
        {
          "Name": "ManaRegenRate",
          "DisplayName": "Mana Regen Rate",
          "RawDescription": "Mana Regen Rate:\r\nMana regen rate will passively increase Mana every period",
          "RawShortDescription": "Mana Regen Rate:\r\nMana regen rate will passively increase Mana every period",
          "Tooltip": "Mana regen rate will passively increase Mana every period",
          "Description": "Mana Regen Rate:\r\nMana regen rate will passively increase Mana every period",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        },
        {
          "Name": "Damage",
          "DisplayName": "Damage",
          "RawDescription": "Damage:\r\nDamage is a meta attribute used by the DamageExecution to calculate final damage, which then turns into -Health\nTemporary value that only exists on the Server. Not replicated.",
          "RawShortDescription": "Damage:\r\nDamage is a meta attribute used by the DamageExecution to calculate final damage, which then turns into -Health\nTemporary value that only exists on the Server. Not replicated.",
          "Tooltip": "Damage is a meta attribute used by the DamageExecution to calculate final damage, which then turns into -Health\nTemporary value that only exists on the Server. Not replicated.",
          "Description": "Damage:\r\nDamage is a meta attribute used by the DamageExecution to calculate final damage, which then turns into -Health\nTemporary value that only exists on the Server. Not replicated.",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        },
        {
          "Name": "StaminaDamage",
          "DisplayName": "Stamina Damage",
          "RawDescription": "Stamina Damage:\r\nStaminaDamage is a meta attribute used by the DamageExecution to calculate final damage, which then turns into -Stamina\nTemporary value that only exists on the Server. Not replicated.",
          "RawShortDescription": "Stamina Damage:\r\nStaminaDamage is a meta attribute used by the DamageExecution to calculate final damage, which then turns into -Stamina\nTemporary value that only exists on the Server. Not replicated.",
          "Tooltip": "StaminaDamage is a meta attribute used by the DamageExecution to calculate final damage, which then turns into -Stamina\nTemporary value that only exists on the Server. Not replicated.",
          "Description": "Stamina Damage:\r\nStaminaDamage is a meta attribute used by the DamageExecution to calculate final damage, which then turns into -Stamina\nTemporary value that only exists on the Server. Not replicated.",
          "CPPType": "FGameplayAttributeData",
          "CPPTypeForwardDeclaration": "struct FGameplayAttributeData;",
          "Type": "FGameplayAttributeData",
          "DisplayType": "FGameplayAttributeData"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCBlueprintFunctionLibrary",
      "IncludePath": "Abilities/GSCBlueprintFunctionLibrary.h",
      "Description": "Ability specific blueprint library\n\nMost games will need to implement one or more blueprint function libraries to expose their native code to blueprints",
      "Properties": [],
      "Events": [],
      "Functions": [
        {
          "Name": "RemoveLooseGameplayTagsFromActor",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:RemoveLooseGameplayTagsFromActor",
          "DisplayName": "Remove Loose Gameplay Tags from Actor",
          "RawDescription": "Tries to find an ability system component on the actor, using AbilitySystemInterface, and\nremove loose GameplayTags which are not backed by a GameplayEffect.\n\nTags added this way are not replicated!\n\nIt is up to the calling GameCode to make sure these tags are added on clients/server where necessary",
          "RawShortDescription": "Tries to find an ability system component on the actor, using AbilitySystemInterface, and\nremove loose GameplayTags which are not backed by a GameplayEffect.\n\nTags added this way are not replicated!\n\nIt is up to the calling GameCode to make sure these tags are added on clients/server where necessary",
          "Description": "Tries to find an ability system component on the actor, using AbilitySystemInterface, and\nremove loose GameplayTags which are not backed by a GameplayEffect.\n\nTags added this way are not replicated!\n\nIt is up to the calling GameCode to make sure these tags are added on clients/server where necessary",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_RemoveLooseGameplayTagsFromActor.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "GameplayTags",
              "DisplayName": "Gameplay Tags",
              "RawDescription": "Gameplay Tags",
              "RawShortDescription": "Gameplay Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        },
        {
          "Name": "RemoveGameplayCue",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:RemoveGameplayCue",
          "DisplayName": "Remove Gameplay Cue",
          "RawDescription": "Removes a persistent gameplay cue from the actor's ability system component",
          "RawShortDescription": "Removes a persistent gameplay cue from the actor's ability system component",
          "Description": "Removes a persistent gameplay cue from the actor's ability system component",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_RemoveGameplayCue.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "GameplayCueTag",
              "DisplayName": "Gameplay Cue Tag",
              "RawDescription": "Gameplay Cue Tag",
              "RawShortDescription": "Gameplay Cue Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            }
          ]
        },
        {
          "Name": "RemoveAllGameplayCues",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:RemoveAllGameplayCues",
          "DisplayName": "Remove All Gameplay Cues",
          "RawDescription": "Removes any GameplayCue added on its own, i.e. not as part of a GameplayEffect.",
          "RawShortDescription": "Removes any GameplayCue added on its own, i.e. not as part of a GameplayEffect.",
          "Description": "Removes any GameplayCue added on its own, i.e. not as part of a GameplayEffect.",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_RemoveAllGameplayCues.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            }
          ]
        },
        {
          "Name": "HasMatchingGameplayTag",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:HasMatchingGameplayTag",
          "DisplayName": "Has Matching Gameplay Tag",
          "RawDescription": "Returns true if the passed in Actor's AbilitySystemComponent has a gameplay tag that matches against the specified tag (expands to include parents of asset tags)",
          "RawShortDescription": "Returns true if the passed in Actor's AbilitySystemComponent has a gameplay tag that matches against the specified tag (expands to include parents of asset tags)",
          "Description": "Returns true if the passed in Actor's AbilitySystemComponent has a gameplay tag that matches against the specified tag (expands to include parents of asset tags)",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_HasMatchingGameplayTag.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "GameplayTag",
              "DisplayName": "Gameplay Tag",
              "RawDescription": "Gameplay Tag",
              "RawShortDescription": "Gameplay Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        },
        {
          "Name": "HasAnyMatchingGameplayTag",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:HasAnyMatchingGameplayTag",
          "DisplayName": "Has Any Matching Gameplay Tag",
          "RawDescription": "Returns true if the passed in Actor's AbilitySystemComponent has any of the matching tags (expands to include parents of asset tags)",
          "RawShortDescription": "Returns true if the passed in Actor's AbilitySystemComponent has any of the matching tags (expands to include parents of asset tags)",
          "Description": "Returns true if the passed in Actor's AbilitySystemComponent has any of the matching tags (expands to include parents of asset tags)",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_HasAnyMatchingGameplayTag.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "GameplayTags",
              "DisplayName": "Gameplay Tags",
              "RawDescription": "Gameplay Tags",
              "RawShortDescription": "Gameplay Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        },
        {
          "Name": "GetDebugStringFromAttribute",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:GetDebugStringFromAttribute",
          "DisplayName": "Get Debug String from Attribute",
          "RawDescription": "Returns the Attribute name",
          "RawShortDescription": "Returns the Attribute name",
          "Description": "Returns the Attribute name",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_GetDebugStringFromAttribute.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "FString",
            "CPPTypeForwardDeclaration": "",
            "Type": "FString",
            "DisplayType": "FString"
          }
        },
        {
          "Name": "GetCompanionCoreComponent",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:GetCompanionCoreComponent",
          "DisplayName": "Get Companion Core Component",
          "RawDescription": "Tries to find a companion core component on the actor",
          "RawShortDescription": "Tries to find a companion core component on the actor",
          "Description": "Tries to find a companion core component on the actor",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_GetCompanionCoreComponent.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "UGSCCoreComponent*",
            "CPPTypeForwardDeclaration": "class UGSCCoreComponent;",
            "Type": "UGSCCoreComponent*",
            "DisplayType": "UGSCCoreComponent*"
          }
        },
        {
          "Name": "GetComboManagerComponent",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:GetComboManagerComponent",
          "DisplayName": "Get Combo Manager Component",
          "RawDescription": "Tries to find a combo manager component on the actor",
          "RawShortDescription": "Tries to find a combo manager component on the actor",
          "Description": "Tries to find a combo manager component on the actor",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_GetComboManagerComponent.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "UGSCComboManagerComponent*",
            "CPPTypeForwardDeclaration": "class UGSCComboManagerComponent;",
            "Type": "UGSCComboManagerComponent*",
            "DisplayType": "UGSCComboManagerComponent*"
          }
        },
        {
          "Name": "GetAllAttributes",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:GetAllAttributes",
          "DisplayName": "Get All Attributes",
          "RawDescription": "Returns all defined Gameplay Attributes for the provided AttributeSet class",
          "RawShortDescription": "Returns all defined Gameplay Attributes for the provided AttributeSet class",
          "Description": "Returns all defined Gameplay Attributes for the provided AttributeSet class",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_GetAllAttributes.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AttributeSetClass",
              "DisplayName": "Attribute Set Class",
              "RawDescription": "Attribute Set Class",
              "RawShortDescription": "Attribute Set Class",
              "Description": "",
              "CPPType": "TSubclassOf<UAttributeSet> ",
              "CPPTypeForwardDeclaration": "class UAttributeSet;",
              "Type": "TSubclassOf<UAttributeSet>",
              "DisplayType": "TSubclassOf<UAttributeSet>"
            },
            {
              "Name": "OutAttributes",
              "DisplayName": "Out Attributes",
              "RawDescription": "Out Attributes",
              "RawShortDescription": "Out Attributes",
              "Description": "",
              "CPPType": "TArray",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "TArray<FGameplayAttribute>",
              "DisplayType": "Array of FGameplayAttribute"
            }
          ]
        },
        {
          "Name": "GetAbilityQueueComponent",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:GetAbilityQueueComponent",
          "DisplayName": "Get Ability Queue Component",
          "RawDescription": "Tries to find an ability queue core component on the actor",
          "RawShortDescription": "Tries to find an ability queue core component on the actor",
          "Description": "Tries to find an ability queue core component on the actor",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_GetAbilityQueueComponent.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "UGSCAbilityQueueComponent*",
            "CPPTypeForwardDeclaration": "class UGSCAbilityQueueComponent;",
            "Type": "UGSCAbilityQueueComponent*",
            "DisplayType": "UGSCAbilityQueueComponent*"
          }
        },
        {
          "Name": "GetAbilityInputBindingComponent",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:GetAbilityInputBindingComponent",
          "DisplayName": "Get Ability Input Binding Component",
          "RawDescription": "Tries to find an ability input binding component on the actor",
          "RawShortDescription": "Tries to find an ability input binding component on the actor",
          "Description": "Tries to find an ability input binding component on the actor",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_GetAbilityInputBindingComponent.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "UGSCAbilityInputBindingComponent*",
            "CPPTypeForwardDeclaration": "class UGSCAbilityInputBindingComponent;",
            "Type": "UGSCAbilityInputBindingComponent*",
            "DisplayType": "UGSCAbilityInputBindingComponent*"
          }
        },
        {
          "Name": "ExecuteGameplayCueWithParams",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:ExecuteGameplayCueWithParams",
          "DisplayName": "Execute Gameplay Cue with Params",
          "RawDescription": "Invoke a gameplay cue on the actor's ability system component, with extra parameters",
          "RawShortDescription": "Invoke a gameplay cue on the actor's ability system component, with extra parameters",
          "Description": "Invoke a gameplay cue on the actor's ability system component, with extra parameters",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_ExecuteGameplayCueWithParams.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "GameplayCueTag",
              "DisplayName": "Gameplay Cue Tag",
              "RawDescription": "Gameplay Cue Tag",
              "RawShortDescription": "Gameplay Cue Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "GameplayCueParameters",
              "DisplayName": "Gameplay Cue Parameters",
              "RawDescription": "Gameplay Cue Parameters",
              "RawShortDescription": "Gameplay Cue Parameters",
              "Description": "",
              "CPPType": "FGameplayCueParameters",
              "CPPTypeForwardDeclaration": "struct FGameplayCueParameters;",
              "Type": "FGameplayCueParameters",
              "DisplayType": "FGameplayCueParameters"
            }
          ]
        },
        {
          "Name": "ExecuteGameplayCueForActor",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:ExecuteGameplayCueForActor",
          "DisplayName": "Execute Gameplay Cue for Actor",
          "RawDescription": "Invoke a gameplay cue on the actor's ability system component",
          "RawShortDescription": "Invoke a gameplay cue on the actor's ability system component",
          "Description": "Invoke a gameplay cue on the actor's ability system component",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_ExecuteGameplayCueForActor.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "GameplayCueTag",
              "DisplayName": "Gameplay Cue Tag",
              "RawDescription": "Gameplay Cue Tag",
              "RawShortDescription": "Gameplay Cue Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "Context",
              "DisplayName": "Context",
              "RawDescription": "Context",
              "RawShortDescription": "Context",
              "Description": "",
              "CPPType": "FGameplayEffectContextHandle",
              "CPPTypeForwardDeclaration": "struct FGameplayEffectContextHandle;",
              "Type": "FGameplayEffectContextHandle",
              "DisplayType": "FGameplayEffectContextHandle"
            }
          ]
        },
        {
          "Name": "AddLooseGameplayTagsToActor",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:AddLooseGameplayTagsToActor",
          "DisplayName": "Add Loose Gameplay Tags to Actor",
          "RawDescription": "Tries to find an ability system component on the actor, using AbilitySystemInterface, and\nadd loose GameplayTags which are not backed by a GameplayEffect.\n\nTags added this way are not replicated!\n\nIt is up to the calling GameCode to make sure these tags are added on clients/server where necessary",
          "RawShortDescription": "Tries to find an ability system component on the actor, using AbilitySystemInterface, and\nadd loose GameplayTags which are not backed by a GameplayEffect.\n\nTags added this way are not replicated!\n\nIt is up to the calling GameCode to make sure these tags are added on clients/server where necessary",
          "Description": "Tries to find an ability system component on the actor, using AbilitySystemInterface, and\nadd loose GameplayTags which are not backed by a GameplayEffect.\n\nTags added this way are not replicated!\n\nIt is up to the calling GameCode to make sure these tags are added on clients/server where necessary",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_AddLooseGameplayTagsToActor.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "GameplayTags",
              "DisplayName": "Gameplay Tags",
              "RawDescription": "Gameplay Tags",
              "RawShortDescription": "Gameplay Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        },
        {
          "Name": "AddGameplayCueWithParams",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:AddGameplayCueWithParams",
          "DisplayName": "Add Gameplay Cue with Params",
          "RawDescription": "Adds a persistent gameplay cue to the actor's ability system component. Optionally will remove if ability ends",
          "RawShortDescription": "Adds a persistent gameplay cue to the actor's ability system component. Optionally will remove if ability ends",
          "Description": "Adds a persistent gameplay cue to the actor's ability system component. Optionally will remove if ability ends",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_AddGameplayCueWithParams.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "GameplayCueTag",
              "DisplayName": "Gameplay Cue Tag",
              "RawDescription": "Gameplay Cue Tag",
              "RawShortDescription": "Gameplay Cue Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "GameplayCueParameter",
              "DisplayName": "Gameplay Cue Parameter",
              "RawDescription": "Gameplay Cue Parameter",
              "RawShortDescription": "Gameplay Cue Parameter",
              "Description": "",
              "CPPType": "FGameplayCueParameters",
              "CPPTypeForwardDeclaration": "struct FGameplayCueParameters;",
              "Type": "FGameplayCueParameters",
              "DisplayType": "FGameplayCueParameters"
            }
          ]
        },
        {
          "Name": "AddGameplayCue",
          "FullName": "Function /Script/GASCompanion.GSCBlueprintFunctionLibrary:AddGameplayCue",
          "DisplayName": "Add Gameplay Cue",
          "RawDescription": "Adds a persistent gameplay cue to the actor's ability system component. Optionally will remove if ability ends",
          "RawShortDescription": "Adds a persistent gameplay cue to the actor's ability system component. Optionally will remove if ability ends",
          "Description": "Adds a persistent gameplay cue to the actor's ability system component. Optionally will remove if ability ends",
          "Image": "GASCompanion/img/GSCBlueprintFunctionLibrary_AddGameplayCue.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "GameplayCueTag",
              "DisplayName": "Gameplay Cue Tag",
              "RawDescription": "Gameplay Cue Tag",
              "RawShortDescription": "Gameplay Cue Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "Context",
              "DisplayName": "Context",
              "RawDescription": "Context",
              "RawShortDescription": "Context",
              "Description": "",
              "CPPType": "FGameplayEffectContextHandle",
              "CPPTypeForwardDeclaration": "struct FGameplayEffectContextHandle;",
              "Type": "FGameplayEffectContextHandle",
              "DisplayType": "FGameplayEffectContextHandle"
            }
          ]
        }
      ]
    },
    {
      "Name": "GSCBTTask_BlueprintBase",
      "IncludePath": "AI/GSCBTTask_BlueprintBase.h",
      "Description": "The only difference with UBTTask_BlueprintBase is that GetStaticDescription can be overriden in Blueprints.",
      "Properties": [],
      "Events": [
        {
          "Name": "K2_GetStaticDescription",
          "FullName": "Function /Script/GASCompanion.GSCBTTask_BlueprintBase:K2_GetStaticDescription",
          "DisplayName": "Get Static Description",
          "RawDescription": "Overrides Task GetStaticDescription()\nShould return string containing description of this node with all setup values\n\n@return string containing description of this node with all setup values",
          "RawShortDescription": "Overrides Task GetStaticDescription()\nShould return string containing description of this node with all setup values\n\n@return string containing description of this node with all setup values",
          "Description": "Overrides Task GetStaticDescription()\nShould return string containing description of this node with all setup values",
          "Image": "GASCompanion/img/GSCBTTask_BlueprintBase_K2_GetStaticDescription.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "FString",
            "CPPTypeForwardDeclaration": "",
            "Type": "FString",
            "DisplayType": "FString"
          }
        }
      ],
      "Functions": []
    },
    {
      "Name": "GSCComboManagerComponent",
      "IncludePath": "Components/GSCComboManagerComponent.h",
      "Description": "GSCCombo Manager Component",
      "Properties": [
        {
          "Name": "ComboIndex",
          "DisplayName": "Combo Index",
          "RawDescription": "Combo Index:\r\nThe combo index for the currently active combo",
          "RawShortDescription": "Combo Index:\r\nThe combo index for the currently active combo",
          "Tooltip": "The combo index for the currently active combo",
          "Description": "Combo Index:\r\nThe combo index for the currently active combo",
          "CPPType": "int32",
          "CPPTypeForwardDeclaration": "",
          "Type": "int32",
          "DisplayType": "int32"
        },
        {
          "Name": "bComboWindowOpened",
          "DisplayName": "Combo Window Opened",
          "RawDescription": "Combo Window Opened:\r\nWhether or not the combo window is opened (eg. player can queue next combo within this window)",
          "RawShortDescription": "Combo Window Opened:\r\nWhether or not the combo window is opened (eg. player can queue next combo within this window)",
          "Tooltip": "Whether or not the combo window is opened (eg. player can queue next combo within this window)",
          "Description": "Combo Window Opened:\r\nWhether or not the combo window is opened (eg. player can queue next combo within this window)",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "bShouldTriggerCombo",
          "DisplayName": "Should Trigger Combo",
          "RawDescription": "Should Trigger Combo:\r\nShould we queue the next combo montage for the currently active combo",
          "RawShortDescription": "Should Trigger Combo:\r\nShould we queue the next combo montage for the currently active combo",
          "Tooltip": "Should we queue the next combo montage for the currently active combo",
          "Description": "Should Trigger Combo:\r\nShould we queue the next combo montage for the currently active combo",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "bRequestTriggerCombo",
          "DisplayName": "Request Trigger Combo",
          "RawDescription": "Request Trigger Combo:\r\nShould we trigger the next combo montage",
          "RawShortDescription": "Request Trigger Combo:\r\nShould we trigger the next combo montage",
          "Tooltip": "Should we trigger the next combo montage",
          "Description": "Request Trigger Combo:\r\nShould we trigger the next combo montage",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "bNextComboAbilityActivated",
          "DisplayName": "Next Combo Ability Activated",
          "RawDescription": "Next Combo Ability Activated:\r\nShould we trigger the next combo montage",
          "RawShortDescription": "Next Combo Ability Activated:\r\nShould we trigger the next combo montage",
          "Tooltip": "Should we trigger the next combo montage",
          "Description": "Next Combo Ability Activated:\r\nShould we trigger the next combo montage",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        }
      ],
      "Events": [],
      "Functions": [
        {
          "Name": "ResetCombo",
          "FullName": "Function /Script/GASCompanion.GSCComboManagerComponent:ResetCombo",
          "DisplayName": "Reset Combo",
          "RawDescription": "Part of the combo system, will reset the ComboIndex counter to 0",
          "RawShortDescription": "Part of the combo system, will reset the ComboIndex counter to 0",
          "Description": "Part of the combo system, will reset the ComboIndex counter to 0",
          "Image": "GASCompanion/img/GSCComboManagerComponent_ResetCombo.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": []
        },
        {
          "Name": "IncrementCombo",
          "FullName": "Function /Script/GASCompanion.GSCComboManagerComponent:IncrementCombo",
          "DisplayName": "Increment Combo",
          "RawDescription": "Part of the combo system, will increment the ComboIndex counter, only if the combo window has been opened",
          "RawShortDescription": "Part of the combo system, will increment the ComboIndex counter, only if the combo window has been opened",
          "Description": "Part of the combo system, will increment the ComboIndex counter, only if the combo window has been opened",
          "Image": "GASCompanion/img/GSCComboManagerComponent_IncrementCombo.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": []
        },
        {
          "Name": "ActivateComboAbility",
          "FullName": "Function /Script/GASCompanion.GSCComboManagerComponent:ActivateComboAbility",
          "DisplayName": "Activate Combo Ability",
          "RawDescription": "Part of the combo system, gate combo ability activation based on if character is already using the ability",
          "RawShortDescription": "Part of the combo system, gate combo ability activation based on if character is already using the ability",
          "Description": "Part of the combo system, gate combo ability activation based on if character is already using the ability",
          "Image": "GASCompanion/img/GSCComboManagerComponent_ActivateComboAbility.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AbilityClass",
              "DisplayName": "Ability Class",
              "RawDescription": "Ability Class",
              "RawShortDescription": "Ability Class",
              "Description": "",
              "CPPType": "TSubclassOf<UGSCGameplayAbility> ",
              "CPPTypeForwardDeclaration": "class UGSCGameplayAbility;",
              "Type": "TSubclassOf<UGSCGameplayAbility>",
              "DisplayType": "TSubclassOf<UGSCGameplayAbility>"
            },
            {
              "Name": "bAllowRemoteActivation",
              "DisplayName": "Allow Remote Activation",
              "RawDescription": "Allow Remote Activation",
              "RawShortDescription": "Allow Remote Activation",
              "Description": "",
              "CPPType": "bool",
              "CPPTypeForwardDeclaration": "",
              "Type": "bool",
              "DisplayType": "bool"
            }
          ]
        }
      ]
    },
    {
      "Name": "GSCComboWindowNotifyState",
      "IncludePath": "Animations/GSCComboWindowNotifyState.h",
      "Description": "Use this notify state to open a combo window during witch the player can queue up the next combo by activating the ability again.\n\nDon't forget to set the `bEndCombo` property to true on this notifier if the montage is the last one of your combo chain.",
      "Properties": [
        {
          "Name": "bEndCombo",
          "DisplayName": "End Combo",
          "RawDescription": "End Combo:\r\nWhether this montage is ending a combo (last montage in the combo chain)",
          "RawShortDescription": "End Combo:\r\nWhether this montage is ending a combo (last montage in the combo chain)",
          "Tooltip": "Whether this montage is ending a combo (last montage in the combo chain)",
          "Description": "End Combo:\r\nWhether this montage is ending a combo (last montage in the combo chain)",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCConsoleManagerSubsystem",
      "IncludePath": "Subsystems/GSCConsoleManagerSubsystem.h",
      "Description": "Local Player Subsystem to handle cheat commands, available in game. Namely to open\nvarious debug UMG widgets.",
      "Properties": [],
      "Events": [],
      "Functions": [
        {
          "Name": "ToggleComboDebugWidget",
          "FullName": "Function /Script/GASCompanion.GSCConsoleManagerSubsystem:ToggleComboDebugWidget",
          "DisplayName": "Toggle Combo Debug Widget",
          "RawDescription": "Create and display, or hide if visible, debug widget for GAS Companion combo component and ability.",
          "RawShortDescription": "Create and display, or hide if visible, debug widget for GAS Companion combo component and ability.",
          "Description": "Create and display, or hide if visible, debug widget for GAS Companion combo component and ability.",
          "Image": "GASCompanion/img/GSCConsoleManagerSubsystem_ToggleComboDebugWidget.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": []
        },
        {
          "Name": "ToggleAbilityQueueDebugWidget",
          "FullName": "Function /Script/GASCompanion.GSCConsoleManagerSubsystem:ToggleAbilityQueueDebugWidget",
          "DisplayName": "Toggle Ability Queue Debug Widget",
          "RawDescription": "Create and display, or hide if visible, debug widget for GAS Companion ability queue system.",
          "RawShortDescription": "Create and display, or hide if visible, debug widget for GAS Companion ability queue system.",
          "Description": "Create and display, or hide if visible, debug widget for GAS Companion ability queue system.",
          "Image": "GASCompanion/img/GSCConsoleManagerSubsystem_ToggleAbilityQueueDebugWidget.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": []
        }
      ]
    },
    {
      "Name": "GSCCoreComponent",
      "IncludePath": "Components/GSCCoreComponent.h",
      "Description": "This Actor Component provides abstraction towards Ability System Component.\n\nFor PlayerStates characters, the Ability System Component is not directly accessible as the owner actor in this case is actually the Player State.\n\nProvides commonly shared functionality and API / Events for all Actors that have an Ability System Component (abstracting away Owner / Avatar actor setup for ASC)",
      "Properties": [],
      "Events": [
        {
          "Name": "OnDamage",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnDamage",
          "DisplayName": "On Damage",
          "RawDescription": "On Damage:\r\nCalled when character takes damage, which may have killed them\n\n@param DamageAmount Amount of damage that was done, not clamped based on current health\n@param SourceCharacter The actual actor that did the damage\n@param DamageTags The gameplay tags of the event that did the damage",
          "RawShortDescription": "On Damage:\r\nCalled when character takes damage, which may have killed them\n\n@param DamageAmount Amount of damage that was done, not clamped based on current health\n@param SourceCharacter The actual actor that did the damage\n@param DamageTags The gameplay tags of the event that did the damage",
          "Description": "Called when character takes damage, which may have killed them",
          "Image": "GASCompanion/img/GSCCoreComponent_OnDamage.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "DamageAmount",
              "DisplayName": "Damage Amount",
              "RawDescription": "Damage Amount",
              "RawShortDescription": "Damage Amount",
              "Description": "Amount of damage that was done, not clamped based on current health",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "SourceCharacter",
              "DisplayName": "Source Character",
              "RawDescription": "Source Character",
              "RawShortDescription": "Source Character",
              "Description": "The actual actor that did the damage",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "DamageTags",
              "DisplayName": "Damage Tags",
              "RawDescription": "Damage Tags",
              "RawShortDescription": "Damage Tags",
              "Description": "The gameplay tags of the event that did the damage",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ]
        },
        {
          "Name": "OnHealthChange",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnHealthChange",
          "DisplayName": "On Health Change",
          "RawDescription": "On Health Change:\r\nCalled when health is changed, either from healing or from being damaged\nFor damage this is called in addition to OnDamaged/OnDeath\n\n@param DeltaValue Change in health value, positive for heal, negative for cost. If 0 the delta is unknown\n@param EventTags The gameplay tags of the event that changed mana",
          "RawShortDescription": "On Health Change:\r\nCalled when health is changed, either from healing or from being damaged\nFor damage this is called in addition to OnDamaged/OnDeath\n\n@param DeltaValue Change in health value, positive for heal, negative for cost. If 0 the delta is unknown\n@param EventTags The gameplay tags of the event that changed mana",
          "Description": "Called when health is changed, either from healing or from being damaged\nFor damage this is called in addition to OnDamaged/OnDeath",
          "Image": "GASCompanion/img/GSCCoreComponent_OnHealthChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "DeltaValue",
              "DisplayName": "Delta Value",
              "RawDescription": "Delta Value",
              "RawShortDescription": "Delta Value",
              "Description": "Change in health value, positive for heal, negative for cost. If 0 the delta is unknown",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "EventTags",
              "DisplayName": "Event Tags",
              "RawDescription": "Event Tags",
              "RawShortDescription": "Event Tags",
              "Description": "The gameplay tags of the event that changed mana",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ]
        },
        {
          "Name": "OnStaminaChange",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnStaminaChange",
          "DisplayName": "On Stamina Change",
          "RawDescription": "On Stamina Change:\r\nCalled when stamina is changed, either from regen  or from being used as a cost\n\n@param DeltaValue Change in stamina value, positive for heal, negative for cost. If 0 the delta is unknown\n@param EventTags The gameplay tags of the event that changed mana",
          "RawShortDescription": "On Stamina Change:\r\nCalled when stamina is changed, either from regen  or from being used as a cost\n\n@param DeltaValue Change in stamina value, positive for heal, negative for cost. If 0 the delta is unknown\n@param EventTags The gameplay tags of the event that changed mana",
          "Description": "Called when stamina is changed, either from regen  or from being used as a cost",
          "Image": "GASCompanion/img/GSCCoreComponent_OnStaminaChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "DeltaValue",
              "DisplayName": "Delta Value",
              "RawDescription": "Delta Value",
              "RawShortDescription": "Delta Value",
              "Description": "Change in stamina value, positive for heal, negative for cost. If 0 the delta is unknown",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "EventTags",
              "DisplayName": "Event Tags",
              "RawDescription": "Event Tags",
              "RawShortDescription": "Event Tags",
              "Description": "The gameplay tags of the event that changed mana",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ]
        },
        {
          "Name": "OnManaChange",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnManaChange",
          "DisplayName": "On Mana Change",
          "RawDescription": "On Mana Change:\r\nCalled when mana is changed, either from healing or from being used as a cost\n\n@param DeltaValue Change in mana value, positive for heal, negative for cost. If 0 the delta is unknown\n@param EventTags The gameplay tags of the event that changed mana",
          "RawShortDescription": "On Mana Change:\r\nCalled when mana is changed, either from healing or from being used as a cost\n\n@param DeltaValue Change in mana value, positive for heal, negative for cost. If 0 the delta is unknown\n@param EventTags The gameplay tags of the event that changed mana",
          "Description": "Called when mana is changed, either from healing or from being used as a cost",
          "Image": "GASCompanion/img/GSCCoreComponent_OnManaChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "DeltaValue",
              "DisplayName": "Delta Value",
              "RawDescription": "Delta Value",
              "RawShortDescription": "Delta Value",
              "Description": "Change in mana value, positive for heal, negative for cost. If 0 the delta is unknown",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "EventTags",
              "DisplayName": "Event Tags",
              "RawDescription": "Event Tags",
              "RawShortDescription": "Event Tags",
              "Description": "The gameplay tags of the event that changed mana",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ]
        },
        {
          "Name": "OnAttributeChange",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnAttributeChange",
          "DisplayName": "On Attribute Change",
          "RawDescription": "On Attribute Change:\r\nCalled when any of the attributes owned by this character are changed\n\n@param Attribute The Attribute that was changed\n@param DeltaValue It it was an additive operation, returns the modifier value.\n                  Or if it was a change coming from damage meta attribute (for health),\n                  returns the damage done.\n@param EventTags The gameplay tags of the event that changed this attribute",
          "RawShortDescription": "On Attribute Change:\r\nCalled when any of the attributes owned by this character are changed\n\n@param Attribute The Attribute that was changed\n@param DeltaValue It it was an additive operation, returns the modifier value.\n                  Or if it was a change coming from damage meta attribute (for health),\n                  returns the damage done.\n@param EventTags The gameplay tags of the event that changed this attribute",
          "Description": "Called when any of the attributes owned by this character are changed",
          "Image": "GASCompanion/img/GSCCoreComponent_OnAttributeChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "The Attribute that was changed",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            },
            {
              "Name": "DeltaValue",
              "DisplayName": "Delta Value",
              "RawDescription": "Delta Value",
              "RawShortDescription": "Delta Value",
              "Description": "It it was an additive operation, returns the modifier value. Or if it was a change coming from damage meta attribute (for health), returns the damage done.",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "EventTags",
              "DisplayName": "Event Tags",
              "RawDescription": "Event Tags",
              "RawShortDescription": "Event Tags",
              "Description": "The gameplay tags of the event that changed this attribute",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ]
        },
        {
          "Name": "OnDeath",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnDeath",
          "DisplayName": "On Death",
          "RawDescription": "On Death:\r\nCalled when character dies",
          "RawShortDescription": "On Death:\r\nCalled when character dies",
          "Description": "Called when character dies",
          "Image": "GASCompanion/img/GSCCoreComponent_OnDeath.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": []
        },
        {
          "Name": "OnPostGameplayEffectExecute",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnPostGameplayEffectExecute",
          "DisplayName": "On Post Gameplay Effect Execute",
          "RawDescription": "On Post Gameplay Effect Execute:\r\nPostGameplayEffectExecute event fired off from native AttributeSets, define here\nany attribute change specific management you are not doing in c++ (like clamp)\n\nOnly triggers after changes to the BaseValue of an Attribute from a GameplayEffect.\n\n@param Attribute The affected GameplayAttribute\n@param SourceActor The instigator Actor that started the whole chain (in case of damage, that would be the damage causer)\n@param TargetActor The owner Actor to which the Attribute change is applied\n@param SourceTags The aggregated SourceTags for this EffectSpec\n@param Payload Payload information with the original AttributeSet, the owning AbilitySystemComponent, calculated DeltaValue and the ClampMinimumValue from config if defined",
          "RawShortDescription": "On Post Gameplay Effect Execute:\r\nPostGameplayEffectExecute event fired off from native AttributeSets, define here\nany attribute change specific management you are not doing in c++ (like clamp)\n\nOnly triggers after changes to the BaseValue of an Attribute from a GameplayEffect.\n\n@param Attribute The affected GameplayAttribute\n@param SourceActor The instigator Actor that started the whole chain (in case of damage, that would be the damage causer)\n@param TargetActor The owner Actor to which the Attribute change is applied\n@param SourceTags The aggregated SourceTags for this EffectSpec\n@param Payload Payload information with the original AttributeSet, the owning AbilitySystemComponent, calculated DeltaValue and the ClampMinimumValue from config if defined",
          "Description": "PostGameplayEffectExecute event fired off from native AttributeSets, define here\nany attribute change specific management you are not doing in c++ (like clamp)\n\nOnly triggers after changes to the BaseValue of an Attribute from a GameplayEffect.",
          "Image": "GASCompanion/img/GSCCoreComponent_OnPostGameplayEffectExecute.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "The affected GameplayAttribute",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            },
            {
              "Name": "SourceActor",
              "DisplayName": "Source Actor",
              "RawDescription": "Source Actor",
              "RawShortDescription": "Source Actor",
              "Description": "The instigator Actor that started the whole chain (in case of damage, that would be the damage causer)",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "TargetActor",
              "DisplayName": "Target Actor",
              "RawDescription": "Target Actor",
              "RawShortDescription": "Target Actor",
              "Description": "The owner Actor to which the Attribute change is applied",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "SourceTags",
              "DisplayName": "Source Tags",
              "RawDescription": "Source Tags",
              "RawShortDescription": "Source Tags",
              "Description": "The aggregated SourceTags for this EffectSpec",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "Payload",
              "DisplayName": "Payload",
              "RawDescription": "Payload",
              "RawShortDescription": "Payload",
              "Description": "Payload information with the original AttributeSet, the owning AbilitySystemComponent, calculated DeltaValue and the ClampMinimumValue from config if defined",
              "CPPType": "FGSCGameplayEffectExecuteData",
              "CPPTypeForwardDeclaration": "struct FGSCGameplayEffectExecuteData;",
              "Type": "FGSCGameplayEffectExecuteData",
              "DisplayType": "FGSCGameplayEffectExecuteData"
            }
          ]
        },
        {
          "Name": "OnPreAttributeChange",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnPreAttributeChange",
          "DisplayName": "On Pre Attribute Change",
          "RawDescription": "On Pre Attribute Change:\r\nPreAttributeChange event fired off from native AttributeSets, react here to\nchanges of Attributes CurrentValue before the modification to the BaseValue\nhappens.\n\nCalled just before any modification happens to an attribute, whether using\nAttribute setters or using GameplayEffect.\n\n@param AttributeSet The AttributeSet that started the change\n@param Attribute The affected GameplayAttribute\n@param NewValue The new value",
          "RawShortDescription": "On Pre Attribute Change:\r\nPreAttributeChange event fired off from native AttributeSets, react here to\nchanges of Attributes CurrentValue before the modification to the BaseValue\nhappens.\n\nCalled just before any modification happens to an attribute, whether using\nAttribute setters or using GameplayEffect.\n\n@param AttributeSet The AttributeSet that started the change\n@param Attribute The affected GameplayAttribute\n@param NewValue The new value",
          "Description": "PreAttributeChange event fired off from native AttributeSets, react here to\nchanges of Attributes CurrentValue before the modification to the BaseValue\nhappens.\n\nCalled just before any modification happens to an attribute, whether using\nAttribute setters or using GameplayEffect.",
          "Image": "GASCompanion/img/GSCCoreComponent_OnPreAttributeChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AttributeSet",
              "DisplayName": "Attribute Set",
              "RawDescription": "Attribute Set",
              "RawShortDescription": "Attribute Set",
              "Description": "The AttributeSet that started the change",
              "CPPType": "UGSCAttributeSetBase*",
              "CPPTypeForwardDeclaration": "class UGSCAttributeSetBase;",
              "Type": "UGSCAttributeSetBase*",
              "DisplayType": "UGSCAttributeSetBase*"
            },
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "Set The AttributeSet that started the change The affected GameplayAttribute",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            },
            {
              "Name": "NewValue",
              "DisplayName": "New Value",
              "RawDescription": "New Value",
              "RawShortDescription": "New Value",
              "Description": "The new value",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "OnAbilityActivated",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnAbilityActivated",
          "DisplayName": "On Ability Activated",
          "RawDescription": "On Ability Activated:\r\nCalled when an ability is activated for the owner actor",
          "RawShortDescription": "On Ability Activated:\r\nCalled when an ability is activated for the owner actor",
          "Description": "Called when an ability is activated for the owner actor",
          "Image": "GASCompanion/img/GSCCoreComponent_OnAbilityActivated.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "",
              "CPPType": "UGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "UGameplayAbility*",
              "DisplayType": "UGameplayAbility*"
            }
          ]
        },
        {
          "Name": "OnAbilityEnded",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnAbilityEnded",
          "DisplayName": "On Ability Ended",
          "RawDescription": "On Ability Ended:\r\nCalled when an ability is ended for the owner actor.",
          "RawShortDescription": "On Ability Ended:\r\nCalled when an ability is ended for the owner actor.",
          "Description": "Called when an ability is ended for the owner actor.",
          "Image": "GASCompanion/img/GSCCoreComponent_OnAbilityEnded.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "",
              "CPPType": "UGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "UGameplayAbility*",
              "DisplayType": "UGameplayAbility*"
            }
          ]
        },
        {
          "Name": "OnAbilityFailed",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnAbilityFailed",
          "DisplayName": "On Ability Failed",
          "RawDescription": "On Ability Failed:\r\nCalled when an ability failed to activated for the owner actor, passes along the failed ability\nand a tag explaining why.",
          "RawShortDescription": "On Ability Failed:\r\nCalled when an ability failed to activated for the owner actor, passes along the failed ability\nand a tag explaining why.",
          "Description": "Called when an ability failed to activated for the owner actor, passes along the failed ability\nand a tag explaining why.",
          "Image": "GASCompanion/img/GSCCoreComponent_OnAbilityFailed.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "",
              "CPPType": "UGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "UGameplayAbility*",
              "DisplayType": "UGameplayAbility*"
            },
            {
              "Name": "ReasonTags",
              "DisplayName": "Reason Tags",
              "RawDescription": "Reason Tags",
              "RawShortDescription": "Reason Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ]
        },
        {
          "Name": "OnGameplayEffectStackChange",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnGameplayEffectStackChange",
          "DisplayName": "On Gameplay Effect Stack Change",
          "RawDescription": "On Gameplay Effect Stack Change:\r\nCalled when a GameplayEffect is added or removed.",
          "RawShortDescription": "On Gameplay Effect Stack Change:\r\nCalled when a GameplayEffect is added or removed.",
          "Description": "Called when a GameplayEffect is added or removed.",
          "Image": "GASCompanion/img/GSCCoreComponent_OnGameplayEffectStackChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AssetTags",
              "DisplayName": "Asset Tags",
              "RawDescription": "Asset Tags",
              "RawShortDescription": "Asset Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "GrantedTags",
              "DisplayName": "Granted Tags",
              "RawDescription": "Granted Tags",
              "RawShortDescription": "Granted Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "ActiveHandle",
              "DisplayName": "Active Handle",
              "RawDescription": "Active Handle",
              "RawShortDescription": "Active Handle",
              "Description": "",
              "CPPType": "FActiveGameplayEffectHandle",
              "CPPTypeForwardDeclaration": "struct FActiveGameplayEffectHandle;",
              "Type": "FActiveGameplayEffectHandle",
              "DisplayType": "FActiveGameplayEffectHandle"
            },
            {
              "Name": "NewStackCount",
              "DisplayName": "New Stack Count",
              "RawDescription": "New Stack Count",
              "RawShortDescription": "New Stack Count",
              "Description": "",
              "CPPType": "int32",
              "CPPTypeForwardDeclaration": "",
              "Type": "int32",
              "DisplayType": "int32"
            },
            {
              "Name": "OldStackCount",
              "DisplayName": "Old Stack Count",
              "RawDescription": "Old Stack Count",
              "RawShortDescription": "Old Stack Count",
              "Description": "",
              "CPPType": "int32",
              "CPPTypeForwardDeclaration": "",
              "Type": "int32",
              "DisplayType": "int32"
            }
          ]
        },
        {
          "Name": "OnGameplayEffectTimeChange",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnGameplayEffectTimeChange",
          "DisplayName": "On Gameplay Effect Time Change",
          "RawDescription": "On Gameplay Effect Time Change:\r\nCalled when a GameplayEffect duration is changed (for instance when duration is refreshed)",
          "RawShortDescription": "On Gameplay Effect Time Change:\r\nCalled when a GameplayEffect duration is changed (for instance when duration is refreshed)",
          "Description": "Called when a GameplayEffect duration is changed (for instance when duration is refreshed)",
          "Image": "GASCompanion/img/GSCCoreComponent_OnGameplayEffectTimeChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AssetTags",
              "DisplayName": "Asset Tags",
              "RawDescription": "Asset Tags",
              "RawShortDescription": "Asset Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "GrantedTags",
              "DisplayName": "Granted Tags",
              "RawDescription": "Granted Tags",
              "RawShortDescription": "Granted Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "ActiveHandle",
              "DisplayName": "Active Handle",
              "RawDescription": "Active Handle",
              "RawShortDescription": "Active Handle",
              "Description": "",
              "CPPType": "FActiveGameplayEffectHandle",
              "CPPTypeForwardDeclaration": "struct FActiveGameplayEffectHandle;",
              "Type": "FActiveGameplayEffectHandle",
              "DisplayType": "FActiveGameplayEffectHandle"
            },
            {
              "Name": "NewStartTime",
              "DisplayName": "New Start Time",
              "RawDescription": "New Start Time",
              "RawShortDescription": "New Start Time",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "NewDuration",
              "DisplayName": "New Duration",
              "RawDescription": "New Duration",
              "RawShortDescription": "New Duration",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "OnGameplayEffectAdded",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnGameplayEffectAdded",
          "DisplayName": "On Gameplay Effect Added",
          "RawDescription": "On Gameplay Effect Added:\r\nCalled when a GameplayEffect is added.",
          "RawShortDescription": "On Gameplay Effect Added:\r\nCalled when a GameplayEffect is added.",
          "Description": "Called when a GameplayEffect is added.",
          "Image": "GASCompanion/img/GSCCoreComponent_OnGameplayEffectAdded.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AssetTags",
              "DisplayName": "Asset Tags",
              "RawDescription": "Asset Tags",
              "RawShortDescription": "Asset Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "GrantedTags",
              "DisplayName": "Granted Tags",
              "RawDescription": "Granted Tags",
              "RawShortDescription": "Granted Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "ActiveHandle",
              "DisplayName": "Active Handle",
              "RawDescription": "Active Handle",
              "RawShortDescription": "Active Handle",
              "Description": "",
              "CPPType": "FActiveGameplayEffectHandle",
              "CPPTypeForwardDeclaration": "struct FActiveGameplayEffectHandle;",
              "Type": "FActiveGameplayEffectHandle",
              "DisplayType": "FActiveGameplayEffectHandle"
            }
          ]
        },
        {
          "Name": "OnGameplayEffectRemoved",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnGameplayEffectRemoved",
          "DisplayName": "On Gameplay Effect Removed",
          "RawDescription": "On Gameplay Effect Removed:\r\nCalled when a GameplayEffect is removed.",
          "RawShortDescription": "On Gameplay Effect Removed:\r\nCalled when a GameplayEffect is removed.",
          "Description": "Called when a GameplayEffect is removed.",
          "Image": "GASCompanion/img/GSCCoreComponent_OnGameplayEffectRemoved.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AssetTags",
              "DisplayName": "Asset Tags",
              "RawDescription": "Asset Tags",
              "RawShortDescription": "Asset Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "GrantedTags",
              "DisplayName": "Granted Tags",
              "RawDescription": "Granted Tags",
              "RawShortDescription": "Granted Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "ActiveHandle",
              "DisplayName": "Active Handle",
              "RawDescription": "Active Handle",
              "RawShortDescription": "Active Handle",
              "Description": "",
              "CPPType": "FActiveGameplayEffectHandle",
              "CPPTypeForwardDeclaration": "struct FActiveGameplayEffectHandle;",
              "Type": "FActiveGameplayEffectHandle",
              "DisplayType": "FActiveGameplayEffectHandle"
            }
          ]
        },
        {
          "Name": "OnGameplayTagChange",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnGameplayTagChange",
          "DisplayName": "On Gameplay Tag Change",
          "RawDescription": "On Gameplay Tag Change:\r\nCalled whenever a tag is added or removed (but not if just count is increased. Only for 'new' and 'removed' events)",
          "RawShortDescription": "On Gameplay Tag Change:\r\nCalled whenever a tag is added or removed (but not if just count is increased. Only for 'new' and 'removed' events)",
          "Description": "Called whenever a tag is added or removed (but not if just count is increased. Only for 'new' and 'removed' events)",
          "Image": "GASCompanion/img/GSCCoreComponent_OnGameplayTagChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "GameplayTag",
              "DisplayName": "Gameplay Tag",
              "RawDescription": "Gameplay Tag",
              "RawShortDescription": "Gameplay Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "NewTagCount",
              "DisplayName": "New Tag Count",
              "RawDescription": "New Tag Count",
              "RawShortDescription": "New Tag Count",
              "Description": "",
              "CPPType": "int32",
              "CPPTypeForwardDeclaration": "",
              "Type": "int32",
              "DisplayType": "int32"
            }
          ]
        },
        {
          "Name": "OnAbilityCommit",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnAbilityCommit",
          "DisplayName": "On Ability Commit",
          "RawDescription": "On Ability Commit:\r\nCalled whenever an ability is committed (cost / cooldown are applied)",
          "RawShortDescription": "On Ability Commit:\r\nCalled whenever an ability is committed (cost / cooldown are applied)",
          "Description": "Called whenever an ability is committed (cost / cooldown are applied)",
          "Image": "GASCompanion/img/GSCCoreComponent_OnAbilityCommit.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "",
              "CPPType": "UGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "UGameplayAbility*",
              "DisplayType": "UGameplayAbility*"
            }
          ]
        },
        {
          "Name": "OnCooldownStart",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnCooldownStart",
          "DisplayName": "On Cooldown Start",
          "RawDescription": "On Cooldown Start:\r\nCalled when an ability with a valid cooldown is committed and cooldown is applied",
          "RawShortDescription": "On Cooldown Start:\r\nCalled when an ability with a valid cooldown is committed and cooldown is applied",
          "Description": "Called when an ability with a valid cooldown is committed and cooldown is applied",
          "Image": "GASCompanion/img/GSCCoreComponent_OnCooldownStart.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "",
              "CPPType": "UGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "UGameplayAbility*",
              "DisplayType": "UGameplayAbility*"
            },
            {
              "Name": "CooldownTags",
              "DisplayName": "Cooldown Tags",
              "RawDescription": "Cooldown Tags",
              "RawShortDescription": "Cooldown Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "TimeRemaining",
              "DisplayName": "Time Remaining",
              "RawDescription": "Time Remaining",
              "RawShortDescription": "Time Remaining",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "Duration",
              "DisplayName": "Duration",
              "RawDescription": "Duration",
              "RawShortDescription": "Duration",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "OnCooldownEnd",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCCoreComponent:OnCooldownEnd",
          "DisplayName": "On Cooldown End",
          "RawDescription": "On Cooldown End:\r\nCalled when a cooldown gameplay tag is removed, meaning cooldown expired",
          "RawShortDescription": "On Cooldown End:\r\nCalled when a cooldown gameplay tag is removed, meaning cooldown expired",
          "Description": "Called when a cooldown gameplay tag is removed, meaning cooldown expired",
          "Image": "GASCompanion/img/GSCCoreComponent_OnCooldownEnd.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "",
              "CPPType": "UGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "UGameplayAbility*",
              "DisplayType": "UGameplayAbility*"
            },
            {
              "Name": "CooldownTag",
              "DisplayName": "Cooldown Tag",
              "RawDescription": "Cooldown Tag",
              "RawShortDescription": "Cooldown Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "Duration",
              "DisplayName": "Duration",
              "RawDescription": "Duration",
              "RawShortDescription": "Duration",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        }
      ],
      "Functions": [
        {
          "Name": "SetAttributeValue",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:SetAttributeValue",
          "DisplayName": "Set Attribute Value",
          "RawDescription": "Sets the base value of an attribute. Existing active modifiers are NOT cleared and will act upon the new base value.",
          "RawShortDescription": "Sets the base value of an attribute. Existing active modifiers are NOT cleared and will act upon the new base value.",
          "Description": "Sets the base value of an attribute. Existing active modifiers are NOT cleared and will act upon the new base value.",
          "Image": "GASCompanion/img/GSCCoreComponent_SetAttributeValue.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            },
            {
              "Name": "NewValue",
              "DisplayName": "New Value",
              "RawDescription": "New Value",
              "RawShortDescription": "New Value",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "IsUsingAbilityByTags",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:IsUsingAbilityByTags",
          "DisplayName": "Is Using Ability by Tags",
          "RawDescription": "Returns whether one of the character's active abilities are matching the provided tags",
          "RawShortDescription": "Returns whether one of the character's active abilities are matching the provided tags",
          "Description": "Returns whether one of the character's active abilities are matching the provided tags",
          "Image": "GASCompanion/img/GSCCoreComponent_IsUsingAbilityByTags.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AbilityTags",
              "DisplayName": "Ability Tags",
              "RawDescription": "Ability Tags",
              "RawShortDescription": "Ability Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        },
        {
          "Name": "IsUsingAbilityByClass",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:IsUsingAbilityByClass",
          "DisplayName": "Is Using Ability by Class",
          "RawDescription": "Returns whether one of the actors's active abilities are matching the provided Ability Class",
          "RawShortDescription": "Returns whether one of the actors's active abilities are matching the provided Ability Class",
          "Description": "Returns whether one of the actors's active abilities are matching the provided Ability Class",
          "Image": "GASCompanion/img/GSCCoreComponent_IsUsingAbilityByClass.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AbilityClass",
              "DisplayName": "Ability Class",
              "RawDescription": "Ability Class",
              "RawShortDescription": "Ability Class",
              "Description": "",
              "CPPType": "TSubclassOf<UGameplayAbility> ",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "TSubclassOf<UGameplayAbility>",
              "DisplayType": "TSubclassOf<UGameplayAbility>"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        },
        {
          "Name": "IsAlive",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:IsAlive",
          "DisplayName": "Is Alive",
          "RawDescription": "Returns whether or not the Actor is considered alive (Health > 0)",
          "RawShortDescription": "Returns whether or not the Actor is considered alive (Health > 0)",
          "Description": "Returns whether or not the Actor is considered alive (Health > 0)",
          "Image": "GASCompanion/img/GSCCoreComponent_IsAlive.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        },
        {
          "Name": "HasMatchingGameplayTag",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:HasMatchingGameplayTag",
          "DisplayName": "Has Matching Gameplay Tag",
          "RawDescription": "Returns true if Actor's AbilitySystemComponent has a gameplay tag that matches against the specified tag (expands to include parents of asset tags)",
          "RawShortDescription": "Returns true if Actor's AbilitySystemComponent has a gameplay tag that matches against the specified tag (expands to include parents of asset tags)",
          "Description": "Returns true if Actor's AbilitySystemComponent has a gameplay tag that matches against the specified tag (expands to include parents of asset tags)",
          "Image": "GASCompanion/img/GSCCoreComponent_HasMatchingGameplayTag.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "TagToCheck",
              "DisplayName": "Tag to Check",
              "RawDescription": "Tag to Check",
              "RawShortDescription": "Tag to Check",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        },
        {
          "Name": "HasAnyMatchingGameplayTags",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:HasAnyMatchingGameplayTags",
          "DisplayName": "Has Any Matching Gameplay Tags",
          "RawDescription": "Returns true if Actor's AbilitySystemComponent has any of the matching tags (expands to include parents of asset tags)",
          "RawShortDescription": "Returns true if Actor's AbilitySystemComponent has any of the matching tags (expands to include parents of asset tags)",
          "Description": "Returns true if Actor's AbilitySystemComponent has any of the matching tags (expands to include parents of asset tags)",
          "Image": "GASCompanion/img/GSCCoreComponent_HasAnyMatchingGameplayTags.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "TagContainer",
              "DisplayName": "Tag Container",
              "RawDescription": "Tag Container",
              "RawShortDescription": "Tag Container",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        },
        {
          "Name": "GrantAbility",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GrantAbility",
          "DisplayName": "Grant Ability",
          "RawDescription": "Grants the Actor with the given ability, making it available for activation\n\n@param Ability The Gameplay Ability to give to the character\n@param Level The Gameplay Ability Level (defaults to 1)",
          "RawShortDescription": "Grants the Actor with the given ability, making it available for activation\n\n@param Ability The Gameplay Ability to give to the character\n@param Level The Gameplay Ability Level (defaults to 1)",
          "Description": "Grants the Actor with the given ability, making it available for activation",
          "Image": "GASCompanion/img/GSCCoreComponent_GrantAbility.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "The Gameplay Ability to give to the character",
              "CPPType": "TSubclassOf<UGameplayAbility> ",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "TSubclassOf<UGameplayAbility>",
              "DisplayType": "TSubclassOf<UGameplayAbility>"
            },
            {
              "Name": "Level",
              "DisplayName": "Level",
              "RawDescription": "Level",
              "RawShortDescription": "Level",
              "Description": "The Gameplay Ability Level (defaults to 1)",
              "CPPType": "int32",
              "CPPTypeForwardDeclaration": "",
              "Type": "int32",
              "DisplayType": "int32"
            }
          ]
        },
        {
          "Name": "GetStamina",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GetStamina",
          "DisplayName": "Get Stamina",
          "RawDescription": "Get Stamina",
          "RawShortDescription": "Get Stamina",
          "Description": "Get Stamina",
          "Image": "GASCompanion/img/GSCCoreComponent_GetStamina.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "float",
            "CPPTypeForwardDeclaration": "",
            "Type": "float",
            "DisplayType": "float"
          }
        },
        {
          "Name": "GetMaxStamina",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GetMaxStamina",
          "DisplayName": "Get Max Stamina",
          "RawDescription": "Get Max Stamina",
          "RawShortDescription": "Get Max Stamina",
          "Description": "Get Max Stamina",
          "Image": "GASCompanion/img/GSCCoreComponent_GetMaxStamina.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "float",
            "CPPTypeForwardDeclaration": "",
            "Type": "float",
            "DisplayType": "float"
          }
        },
        {
          "Name": "GetMaxMana",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GetMaxMana",
          "DisplayName": "Get Max Mana",
          "RawDescription": "Get Max Mana",
          "RawShortDescription": "Get Max Mana",
          "Description": "Get Max Mana",
          "Image": "GASCompanion/img/GSCCoreComponent_GetMaxMana.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "float",
            "CPPTypeForwardDeclaration": "",
            "Type": "float",
            "DisplayType": "float"
          }
        },
        {
          "Name": "GetMaxHealth",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GetMaxHealth",
          "DisplayName": "Get Max Health",
          "RawDescription": "Get Max Health",
          "RawShortDescription": "Get Max Health",
          "Description": "Get Max Health",
          "Image": "GASCompanion/img/GSCCoreComponent_GetMaxHealth.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "float",
            "CPPTypeForwardDeclaration": "",
            "Type": "float",
            "DisplayType": "float"
          }
        },
        {
          "Name": "GetMana",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GetMana",
          "DisplayName": "Get Mana",
          "RawDescription": "Get Mana",
          "RawShortDescription": "Get Mana",
          "Description": "Get Mana",
          "Image": "GASCompanion/img/GSCCoreComponent_GetMana.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "float",
            "CPPTypeForwardDeclaration": "",
            "Type": "float",
            "DisplayType": "float"
          }
        },
        {
          "Name": "GetHealth",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GetHealth",
          "DisplayName": "Get Health",
          "RawDescription": "Get Health",
          "RawShortDescription": "Get Health",
          "Description": "Get Health",
          "Image": "GASCompanion/img/GSCCoreComponent_GetHealth.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "float",
            "CPPTypeForwardDeclaration": "",
            "Type": "float",
            "DisplayType": "float"
          }
        },
        {
          "Name": "GetCurrentAttributeValue",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GetCurrentAttributeValue",
          "DisplayName": "Get Current Attribute Value",
          "RawDescription": "Returns current (final) value of an attribute",
          "RawShortDescription": "Returns current (final) value of an attribute",
          "Description": "Returns current (final) value of an attribute",
          "Image": "GASCompanion/img/GSCCoreComponent_GetCurrentAttributeValue.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "float",
            "CPPTypeForwardDeclaration": "",
            "Type": "float",
            "DisplayType": "float"
          }
        },
        {
          "Name": "GetAttributeValue",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GetAttributeValue",
          "DisplayName": "Get Attribute Value",
          "RawDescription": "Returns the current value of an attribute (base value). That is, the value of the attribute with no stateful modifiers",
          "RawShortDescription": "Returns the current value of an attribute (base value). That is, the value of the attribute with no stateful modifiers",
          "Description": "Returns the current value of an attribute (base value). That is, the value of the attribute with no stateful modifiers",
          "Image": "GASCompanion/img/GSCCoreComponent_GetAttributeValue.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "float",
            "CPPTypeForwardDeclaration": "",
            "Type": "float",
            "DisplayType": "float"
          }
        },
        {
          "Name": "GetActiveAbilitiesByTags",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GetActiveAbilitiesByTags",
          "DisplayName": "Get Active Abilities by Tags",
          "RawDescription": "Returns a list of currently active ability instances that match the given tags\n\nThis only returns if the ability is currently running\n\n@param GameplayTagContainer The Ability Tags to search for",
          "RawShortDescription": "Returns a list of currently active ability instances that match the given tags\n\nThis only returns if the ability is currently running\n\n@param GameplayTagContainer The Ability Tags to search for",
          "Description": "Returns a list of currently active ability instances that match the given tags\n\nThis only returns if the ability is currently running",
          "Image": "GASCompanion/img/GSCCoreComponent_GetActiveAbilitiesByTags.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "GameplayTagContainer",
              "DisplayName": "Gameplay Tag Container",
              "RawDescription": "Gameplay Tag Container",
              "RawShortDescription": "Gameplay Tag Container",
              "Description": "The Ability Tags to search for",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "TArray",
            "CPPTypeForwardDeclaration": "class UGameplayAbility;",
            "Type": "TArray<UGameplayAbility>",
            "DisplayType": "Array of UGameplayAbility"
          }
        },
        {
          "Name": "GetActiveAbilitiesByClass",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:GetActiveAbilitiesByClass",
          "DisplayName": "Get Active Abilities by Class",
          "RawDescription": "Returns a list of currently active ability instances that match the given class\n\n@param AbilityToSearch The Gameplay Ability Class to search for",
          "RawShortDescription": "Returns a list of currently active ability instances that match the given class\n\n@param AbilityToSearch The Gameplay Ability Class to search for",
          "Description": "Returns a list of currently active ability instances that match the given class",
          "Image": "GASCompanion/img/GSCCoreComponent_GetActiveAbilitiesByClass.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AbilityToSearch",
              "DisplayName": "Ability to Search",
              "RawDescription": "Ability to Search",
              "RawShortDescription": "Ability to Search",
              "Description": "The Gameplay Ability Class to search for",
              "CPPType": "TSubclassOf<UGameplayAbility> ",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "TSubclassOf<UGameplayAbility>",
              "DisplayType": "TSubclassOf<UGameplayAbility>"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "TArray",
            "CPPTypeForwardDeclaration": "class UGameplayAbility;",
            "Type": "TArray<UGameplayAbility>",
            "DisplayType": "Array of UGameplayAbility"
          }
        },
        {
          "Name": "Die",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:Die",
          "DisplayName": "Die",
          "RawDescription": "Triggers death events for the owner actor",
          "RawShortDescription": "Triggers death events for the owner actor",
          "Description": "Triggers death events for the owner actor",
          "Image": "GASCompanion/img/GSCCoreComponent_Die.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": []
        },
        {
          "Name": "ClearAbility",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:ClearAbility",
          "DisplayName": "Clear Ability",
          "RawDescription": "Remove an ability from the Actor's Ability System Component\n\n@param Ability The Gameplay Ability Class to remove",
          "RawShortDescription": "Remove an ability from the Actor's Ability System Component\n\n@param Ability The Gameplay Ability Class to remove",
          "Description": "Remove an ability from the Actor's Ability System Component",
          "Image": "GASCompanion/img/GSCCoreComponent_ClearAbility.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "The Gameplay Ability Class to remove",
              "CPPType": "TSubclassOf<UGameplayAbility> ",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "TSubclassOf<UGameplayAbility>",
              "DisplayType": "TSubclassOf<UGameplayAbility>"
            }
          ]
        },
        {
          "Name": "ClearAbilities",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:ClearAbilities",
          "DisplayName": "Clear Abilities",
          "RawDescription": "Remove an set of abilities from the Actor's Ability System Component\n\n@param Abilities Array of Ability Class to remove",
          "RawShortDescription": "Remove an set of abilities from the Actor's Ability System Component\n\n@param Abilities Array of Ability Class to remove",
          "Description": "Remove an set of abilities from the Actor's Ability System Component",
          "Image": "GASCompanion/img/GSCCoreComponent_ClearAbilities.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Abilities",
              "DisplayName": "Abilities",
              "RawDescription": "Abilities",
              "RawShortDescription": "Abilities",
              "Description": "Array of Ability Class to remove",
              "CPPType": "TArray",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "TArray<UGameplayAbility>",
              "DisplayType": "Array of UGameplayAbility"
            }
          ]
        },
        {
          "Name": "ClampAttributeValue",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:ClampAttributeValue",
          "DisplayName": "Clamp Attribute Value",
          "RawDescription": "Clamps the Attribute from MinValue to MaxValue",
          "RawShortDescription": "Clamps the Attribute from MinValue to MaxValue",
          "Description": "Clamps the Attribute from MinValue to MaxValue",
          "Image": "GASCompanion/img/GSCCoreComponent_ClampAttributeValue.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            },
            {
              "Name": "MinValue",
              "DisplayName": "Min Value",
              "RawDescription": "Min Value",
              "RawShortDescription": "Min Value",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "MaxValue",
              "DisplayName": "Max Value",
              "RawDescription": "Max Value",
              "RawShortDescription": "Max Value",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "AdjustAttributeForMaxChange",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:AdjustAttributeForMaxChange",
          "DisplayName": "Adjust Attribute for Max Change",
          "RawDescription": "Helper function to proportionally adjust the value of an attribute when it's associated max attribute changes.\n(e.g. When MaxHealth increases, Health increases by an amount that maintains the same percentage as before)\n\n@param AttributeSet The AttributeSet owner for the affected attributes\n@param AffectedAttributeProperty The affected Attribute property\n@param MaxAttribute The related MaxAttribute\n@param NewMaxValue The new value for the MaxAttribute",
          "RawShortDescription": "Helper function to proportionally adjust the value of an attribute when it's associated max attribute changes.\n(e.g. When MaxHealth increases, Health increases by an amount that maintains the same percentage as before)\n\n@param AttributeSet The AttributeSet owner for the affected attributes\n@param AffectedAttributeProperty The affected Attribute property\n@param MaxAttribute The related MaxAttribute\n@param NewMaxValue The new value for the MaxAttribute",
          "Description": "Helper function to proportionally adjust the value of an attribute when it's associated max attribute changes.\n(e.g. When MaxHealth increases, Health increases by an amount that maintains the same percentage as before)",
          "Image": "GASCompanion/img/GSCCoreComponent_AdjustAttributeForMaxChange.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AttributeSet",
              "DisplayName": "Attribute Set",
              "RawDescription": "Attribute Set",
              "RawShortDescription": "Attribute Set",
              "Description": "The AttributeSet owner for the affected attributes",
              "CPPType": "UGSCAttributeSetBase*",
              "CPPTypeForwardDeclaration": "class UGSCAttributeSetBase;",
              "Type": "UGSCAttributeSetBase*",
              "DisplayType": "UGSCAttributeSetBase*"
            },
            {
              "Name": "AffectedAttributeProperty",
              "DisplayName": "Affected Attribute Property",
              "RawDescription": "Affected Attribute Property",
              "RawShortDescription": "Affected Attribute Property",
              "Description": "The affected Attribute property",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            },
            {
              "Name": "MaxAttribute",
              "DisplayName": "Max Attribute",
              "RawDescription": "Max Attribute",
              "RawShortDescription": "Max Attribute",
              "Description": "The related MaxAttribute",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            },
            {
              "Name": "NewMaxValue",
              "DisplayName": "New Max Value",
              "RawDescription": "New Max Value",
              "RawShortDescription": "New Max Value",
              "Description": "The new value for the MaxAttribute",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "ActivateAbilityByTags",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:ActivateAbilityByTags",
          "DisplayName": "Activate Ability by Tags",
          "RawDescription": "Attempts to activate a **single** gameplay ability that matches the given tag and DoesAbilitySatisfyTagRequirements().\n\nIt differs from GAS ASC TryActivateAbilitiesByTag which tries to activate *every* ability, whereas this version will pick a\nrandom one and attempt to activate it.\n\nReturns true if the ability attempts to activate, and the reference to the Activated Ability if any.\n\n@param AbilityTags Set of Gameplay Tags to search for\n@param ActivatedAbility The Gameplay Ability that was triggered on success (only returned if it is a GSCGameplayAbility)\n@param bAllowRemoteActivation If true, it will remotely activate local/server abilities, if false it will only try to locally activate abilities.\n@return bSuccess Returns true if it thinks it activated, but it may return false positives due to failure later in activation.",
          "RawShortDescription": "Attempts to activate a **single** gameplay ability that matches the given tag and DoesAbilitySatisfyTagRequirements().\n\nIt differs from GAS ASC TryActivateAbilitiesByTag which tries to activate *every* ability, whereas this version will pick a\nrandom one and attempt to activate it.\n\nReturns true if the ability attempts to activate, and the reference to the Activated Ability if any.\n\n@param AbilityTags Set of Gameplay Tags to search for\n@param ActivatedAbility The Gameplay Ability that was triggered on success (only returned if it is a GSCGameplayAbility)\n@param bAllowRemoteActivation If true, it will remotely activate local/server abilities, if false it will only try to locally activate abilities.\n@return bSuccess Returns true if it thinks it activated, but it may return false positives due to failure later in activation.",
          "Description": "Attempts to activate a **single** gameplay ability that matches the given tag and DoesAbilitySatisfyTagRequirements().\n\nIt differs from GAS ASC TryActivateAbilitiesByTag which tries to activate *every* ability, whereas this version will pick a\nrandom one and attempt to activate it.\n\nReturns true if the ability attempts to activate, and the reference to the Activated Ability if any.",
          "Image": "GASCompanion/img/GSCCoreComponent_ActivateAbilityByTags.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AbilityTags",
              "DisplayName": "Ability Tags",
              "RawDescription": "Ability Tags",
              "RawShortDescription": "Ability Tags",
              "Description": "Set of Gameplay Tags to search for",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "ActivatedAbility",
              "DisplayName": "Activated Ability",
              "RawDescription": "Activated Ability",
              "RawShortDescription": "Activated Ability",
              "Description": "The Gameplay Ability that was triggered on success (only returned if it is a GSCGameplayAbility)",
              "CPPType": "UGSCGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGSCGameplayAbility;",
              "Type": "UGSCGameplayAbility*",
              "DisplayType": "UGSCGameplayAbility*"
            },
            {
              "Name": "bAllowRemoteActivation",
              "DisplayName": "Allow Remote Activation",
              "RawDescription": "Allow Remote Activation",
              "RawShortDescription": "Allow Remote Activation",
              "Description": "If true, it will remotely activate local/server abilities, if false it will only try to locally activate abilities.",
              "CPPType": "bool",
              "CPPTypeForwardDeclaration": "",
              "Type": "bool",
              "DisplayType": "bool"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        },
        {
          "Name": "ActivateAbilityByClass",
          "FullName": "Function /Script/GASCompanion.GSCCoreComponent:ActivateAbilityByClass",
          "DisplayName": "Activate Ability by Class",
          "RawDescription": "Attempts to activate the ability that is passed in. This will check costs and requirements before doing so.\n\nReturns true if it thinks it activated, but it may return false positives due to failure later in activation.\n\n@param AbilityClass Gameplay Ability Class to activate\n@param ActivatedAbility The Gameplay Ability that was triggered on success (only returned if it is a GSCGameplayAbility)\n@param bAllowRemoteActivation If true, it will remotely activate local/server abilities, if false it will only try to locally activate abilities.\n@return bSuccess Returns true if it thinks it activated, but it may return false positives due to failure later in activation.",
          "RawShortDescription": "Attempts to activate the ability that is passed in. This will check costs and requirements before doing so.\n\nReturns true if it thinks it activated, but it may return false positives due to failure later in activation.\n\n@param AbilityClass Gameplay Ability Class to activate\n@param ActivatedAbility The Gameplay Ability that was triggered on success (only returned if it is a GSCGameplayAbility)\n@param bAllowRemoteActivation If true, it will remotely activate local/server abilities, if false it will only try to locally activate abilities.\n@return bSuccess Returns true if it thinks it activated, but it may return false positives due to failure later in activation.",
          "Description": "Attempts to activate the ability that is passed in. This will check costs and requirements before doing so.\n\nReturns true if it thinks it activated, but it may return false positives due to failure later in activation.",
          "Image": "GASCompanion/img/GSCCoreComponent_ActivateAbilityByClass.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AbilityClass",
              "DisplayName": "Ability Class",
              "RawDescription": "Ability Class",
              "RawShortDescription": "Ability Class",
              "Description": "Gameplay Ability Class to activate",
              "CPPType": "TSubclassOf<UGameplayAbility> ",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "TSubclassOf<UGameplayAbility>",
              "DisplayType": "TSubclassOf<UGameplayAbility>"
            },
            {
              "Name": "ActivatedAbility",
              "DisplayName": "Activated Ability",
              "RawDescription": "Activated Ability",
              "RawShortDescription": "Activated Ability",
              "Description": "The Gameplay Ability that was triggered on success (only returned if it is a GSCGameplayAbility)",
              "CPPType": "UGSCGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGSCGameplayAbility;",
              "Type": "UGSCGameplayAbility*",
              "DisplayType": "UGSCGameplayAbility*"
            },
            {
              "Name": "bAllowRemoteActivation",
              "DisplayName": "Allow Remote Activation",
              "RawDescription": "Allow Remote Activation",
              "RawShortDescription": "Allow Remote Activation",
              "Description": "If true, it will remotely activate local/server abilities, if false it will only try to locally activate abilities.",
              "CPPType": "bool",
              "CPPTypeForwardDeclaration": "",
              "Type": "bool",
              "DisplayType": "bool"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "bool",
            "CPPTypeForwardDeclaration": "",
            "Type": "bool",
            "DisplayType": "bool"
          }
        }
      ]
    },
    {
      "Name": "GSCDeveloperSettings",
      "IncludePath": "Core/Settings/GSCDeveloperSettings.h",
      "Description": "General Settings for GAS Companion Plugin.",
      "Properties": [
        {
          "Name": "bPreventGlobalDataInitialization",
          "DisplayName": "Prevent Ability System Global Data Initialization in Startup Module (Recommended)",
          "RawDescription": "Prevent Global Data Initialization:\r\nTurn this on to prevent GAS Companion module to initialize UAbilitySystemGlobals (InitGlobalData) in the plugin StartupModule method.\n\nInitGlobalData() might be invoked a bit too early otherwise (with GAS Companion's StartupModule). It is expected that if you set this option to true to use\nan AssetManager subclass where `UAbilitySystemGlobals::Get().InitGlobalData()` is called in `StartInitialLoading``\n\nYou'll need to update `Project Settings -> Engine > General Settings > Asset Manager Class` to use your AssetManager subclass.\n\nGAS Companion provides one `GSCAssetManager` and the editor should ask you if you want to update the `Asset Manager Class` to use it if the current Manager class\nis using engine's default one.",
          "RawShortDescription": "Prevent Global Data Initialization:\r\nTurn this on to prevent GAS Companion module to initialize UAbilitySystemGlobals (InitGlobalData) in the plugin StartupModule method.\n\nInitGlobalData() might be invoked a bit too early otherwise (with GAS Companion's StartupModule). It is expected that if you set this option to true to use\nan AssetManager subclass where `UAbilitySystemGlobals::Get().InitGlobalData()` is called in `StartInitialLoading``\n\nYou'll need to update `Project Settings -> Engine > General Settings > Asset Manager Class` to use your AssetManager subclass.\n\nGAS Companion provides one `GSCAssetManager` and the editor should ask you if you want to update the `Asset Manager Class` to use it if the current Manager class\nis using engine's default one.",
          "Tooltip": "Turn this on to prevent GAS Companion module to initialize UAbilitySystemGlobals (InitGlobalData) in the plugin StartupModule method.\n\nInitGlobalData() might be invoked a bit too early otherwise (with GAS Companion's StartupModule). It is expected that if you set this option to true to use\nan AssetManager subclass where `UAbilitySystemGlobals::Get().InitGlobalData()` is called in `StartInitialLoading``\n\nYou'll need to update `Project Settings -> Engine > General Settings > Asset Manager Class` to use your AssetManager subclass.\n\nGAS Companion provides one `GSCAssetManager` and the editor should ask you if you want to update the `Asset Manager Class` to use it if the current Manager class\nis using engine's default one.",
          "Description": "Prevent Global Data Initialization:\r\nTurn this on to prevent GAS Companion module to initialize UAbilitySystemGlobals (InitGlobalData) in the plugin StartupModule method.\n\nInitGlobalData() might be invoked a bit too early otherwise (with GAS Companion's StartupModule). It is expected that if you set this option to true to use\nan AssetManager subclass where `UAbilitySystemGlobals::Get().InitGlobalData()` is called in `StartInitialLoading``\n\nYou'll need to update `Project Settings -> Engine > General Settings > Asset Manager Class` to use your AssetManager subclass.\n\nGAS Companion provides one `GSCAssetManager` and the editor should ask you if you want to update the `Asset Manager Class` to use it if the current Manager class\nis using engine's default one.",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCExampleMapManager",
      "IncludePath": "Core/Editor/GSCExampleMapManager.h",
      "Description": "GSCExample Map Manager",
      "Properties": [
        {
          "Name": "ActionMappings",
          "DisplayName": "Action Mappings",
          "RawDescription": "Action Mappings:\r\nList of Action Mappings required to run the template / sample.\n\nDefine here the list of action mappings and their associated key input.",
          "RawShortDescription": "Action Mappings:\r\nList of Action Mappings required to run the template / sample.\n\nDefine here the list of action mappings and their associated key input.",
          "Tooltip": "List of Action Mappings required to run the template / sample.\n\nDefine here the list of action mappings and their associated key input.",
          "Description": "Action Mappings:\r\nList of Action Mappings required to run the template / sample.\n\nDefine here the list of action mappings and their associated key input.",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FInputActionKeyMapping;",
          "Type": "TArray<FInputActionKeyMapping>",
          "DisplayType": "Array of FInputActionKeyMapping"
        },
        {
          "Name": "AxisMappings",
          "DisplayName": "Axis Mappings",
          "RawDescription": "Axis Mappings:\r\nList of Action Mappings required to run the template / sample.\n\nDefine here the list of axis mappings and their associated axis input.",
          "RawShortDescription": "Axis Mappings:\r\nList of Action Mappings required to run the template / sample.\n\nDefine here the list of axis mappings and their associated axis input.",
          "Tooltip": "List of Action Mappings required to run the template / sample.\n\nDefine here the list of axis mappings and their associated axis input.",
          "Description": "Axis Mappings:\r\nList of Action Mappings required to run the template / sample.\n\nDefine here the list of axis mappings and their associated axis input.",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FInputAxisKeyMapping;",
          "Type": "TArray<FInputAxisKeyMapping>",
          "DisplayType": "Array of FInputAxisKeyMapping"
        },
        {
          "Name": "GameplayTags",
          "DisplayName": "Gameplay Tags",
          "RawDescription": "Gameplay Tags:\r\nList of GameplayTags required to run the template / sample.\n\nDefine here the list of GameplayTags Strings in the form of \"A.B.C\".\n\nWhen the map loads, the user will be asked if these tags can be created for him.",
          "RawShortDescription": "Gameplay Tags:\r\nList of GameplayTags required to run the template / sample.\n\nDefine here the list of GameplayTags Strings in the form of \"A.B.C\".\n\nWhen the map loads, the user will be asked if these tags can be created for him.",
          "Tooltip": "List of GameplayTags required to run the template / sample.\n\nDefine here the list of GameplayTags Strings in the form of \"A.B.C\".\n\nWhen the map loads, the user will be asked if these tags can be created for him.",
          "Description": "Gameplay Tags:\r\nList of GameplayTags required to run the template / sample.\n\nDefine here the list of GameplayTags Strings in the form of \"A.B.C\".\n\nWhen the map loads, the user will be asked if these tags can be created for him.",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "",
          "Type": "TArray",
          "DisplayType": "TArray"
        },
        {
          "Name": "AttributeSets",
          "DisplayName": "Attribute Sets",
          "RawDescription": "Attribute Sets:\r\nList of Attribute Sets required to run the template / sample.\n\nDefine here the list of AttributeSets that are meant to be configured in GAS Companion Project's Settings.\n\nWhen the map loads, the user will be asked if these AttributeSets can be registered for him.",
          "RawShortDescription": "Attribute Sets:\r\nList of Attribute Sets required to run the template / sample.\n\nDefine here the list of AttributeSets that are meant to be configured in GAS Companion Project's Settings.\n\nWhen the map loads, the user will be asked if these AttributeSets can be registered for him.",
          "Tooltip": "List of Attribute Sets required to run the template / sample.\n\nDefine here the list of AttributeSets that are meant to be configured in GAS Companion Project's Settings.\n\nWhen the map loads, the user will be asked if these AttributeSets can be registered for him.",
          "Description": "Attribute Sets:\r\nList of Attribute Sets required to run the template / sample.\n\nDefine here the list of AttributeSets that are meant to be configured in GAS Companion Project's Settings.\n\nWhen the map loads, the user will be asked if these AttributeSets can be registered for him.",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "class UAttributeSet;",
          "Type": "TArray<UAttributeSet>",
          "DisplayType": "Array of UAttributeSet"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCGameFeatureAction_AddAbilities",
      "IncludePath": "GameFeatures/Actions/GSCGameFeatureAction_AddAbilities.h",
      "Description": "GameFeatureAction responsible for granting abilities (and attributes) to actors of a specified type.",
      "Properties": [
        {
          "Name": "AbilitiesList",
          "DisplayName": "Abilities List",
          "RawDescription": "Abilities List:\r\nList of Ability to grant to actors of the specified class",
          "RawShortDescription": "Abilities List:\r\nList of Ability to grant to actors of the specified class",
          "Tooltip": "List of Ability to grant to actors of the specified class",
          "Description": "Abilities List:\r\nList of Ability to grant to actors of the specified class",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FGSCGameFeatureAbilitiesEntry;",
          "Type": "TArray<FGSCGameFeatureAbilitiesEntry>",
          "DisplayType": "Array of FGSCGameFeatureAbilitiesEntry"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCGameFeatureAction_AddAnimLayers",
      "IncludePath": "GameFeatures/Actions/GSCGameFeatureAction_AddAnimLayers.h",
      "Description": "GameFeatureAction responsible for \"pushing\" linked Anim Layers to main Animation Blueprint",
      "Properties": [
        {
          "Name": "AnimLayerEntries",
          "DisplayName": "Anim Layer Entries",
          "RawDescription": "Anim Layer Entries:\r\nList of components to add to gameplay actors when this game feature is enabled // ShowOnlyInnerProperties ?",
          "RawShortDescription": "Anim Layer Entries:\r\nList of components to add to gameplay actors when this game feature is enabled // ShowOnlyInnerProperties ?",
          "Tooltip": "List of components to add to gameplay actors when this game feature is enabled // ShowOnlyInnerProperties ?",
          "Description": "Anim Layer Entries:\r\nList of components to add to gameplay actors when this game feature is enabled // ShowOnlyInnerProperties ?",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FGSCAnimLayerEntry;",
          "Type": "TArray<FGSCAnimLayerEntry>",
          "DisplayType": "Array of FGSCAnimLayerEntry"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCGameFeatureAction_AddInputMappingContext",
      "IncludePath": "GameFeatures/Actions/GSCGameFeatureAction_AddInputMappingContext.h",
      "Description": "Adds InputMappingContext to local players' EnhancedInput system.\n\nExpects that local players are set up to use the EnhancedInput system.",
      "Properties": [
        {
          "Name": "InputMapping",
          "DisplayName": "Input Mapping",
          "RawDescription": "Input Mapping:\r\nInput Mapping Context to add to local players EnhancedInput system.",
          "RawShortDescription": "Input Mapping:\r\nInput Mapping Context to add to local players EnhancedInput system.",
          "Tooltip": "Input Mapping Context to add to local players EnhancedInput system.",
          "Description": "Input Mapping:\r\nInput Mapping Context to add to local players EnhancedInput system.",
          "CPPType": "TSoftObjectPtr<UInputMappingContext>",
          "CPPTypeForwardDeclaration": "class UInputMappingContext;",
          "Type": "TSoftObjectPtr<UInputMappingContext>",
          "DisplayType": "TSoftObjectPtr<UInputMappingContext>"
        },
        {
          "Name": "Priority",
          "DisplayName": "Priority",
          "RawDescription": "Priority:\r\nHigher priority input mappings will be prioritized over mappings with a lower priority.",
          "RawShortDescription": "Priority:\r\nHigher priority input mappings will be prioritized over mappings with a lower priority.",
          "Tooltip": "Higher priority input mappings will be prioritized over mappings with a lower priority.",
          "Description": "Priority:\r\nHigher priority input mappings will be prioritized over mappings with a lower priority.",
          "CPPType": "int32",
          "CPPTypeForwardDeclaration": "",
          "Type": "int32",
          "DisplayType": "int32"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCGameplayAbility",
      "IncludePath": "Abilities/GSCGameplayAbility.h",
      "Description": "GameplayAbility Parent class that is recommended to use with GAS Companion.\n\nAdded functionality compared to regular UGameplayAbility includes:\n\n- GameplayEffect containers: https://github.com/tranek/GASDocumentation#concepts-ge-containers\n- Ability Queue System support: If you intend to use Ability Queueing, you should rely on this class for your Abilities\n- Loosely Check for Cost: If you'd like your abilities to activate regardless of cost attribute going into negative values,\nand only checking if cost attribute is not below or equal to 0 already.\n- End delegate: A blueprint assignable delegate is exposed which is triggered on ability end. Particularly useful for AI Behavior Tree tasks.\n- Activate On Granted: Support for \"Passive\" abilities, an ability that automatically activates and run continuously (eg. not calling EndAbility).",
      "Properties": [
        {
          "Name": "bLooselyCheckAbilityCost",
          "DisplayName": "Loosely Check Ability Cost",
          "RawDescription": "Loosely Check Ability Cost:\r\nif true, the ability can be activated even it the cost is going into negative values, preventing activation only if cost is below or equal to 0 already",
          "RawShortDescription": "Loosely Check Ability Cost:\r\nif true, the ability can be activated even it the cost is going into negative values, preventing activation only if cost is below or equal to 0 already",
          "Tooltip": "if true, the ability can be activated even it the cost is going into negative values, preventing activation only if cost is below or equal to 0 already",
          "Description": "Loosely Check Ability Cost:\r\nif true, the ability can be activated even it the cost is going into negative values, preventing activation only if cost is below or equal to 0 already",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "bActivateOnGranted",
          "DisplayName": "Activate on Granted",
          "RawDescription": "Activate on Granted:\r\nIf true, the ability will be automatically activated as soon as it is granted.\n\nYou can either implement one-off Abilities that are meant to be activated right away when granted,\nor \"Passive Abilities\" with this, an ability that automatically activates and run continuously (eg. not calling EndAbility)\n\nIn both case, GameplayAbilities configured to be activated on granted will only activate on server and typically have\na Net Execution Policy of Server Only.",
          "RawShortDescription": "Activate on Granted:\r\nIf true, the ability will be automatically activated as soon as it is granted.\n\nYou can either implement one-off Abilities that are meant to be activated right away when granted,\nor \"Passive Abilities\" with this, an ability that automatically activates and run continuously (eg. not calling EndAbility)\n\nIn both case, GameplayAbilities configured to be activated on granted will only activate on server and typically have\na Net Execution Policy of Server Only.",
          "Tooltip": "If true, the ability will be automatically activated as soon as it is granted.\n\nYou can either implement one-off Abilities that are meant to be activated right away when granted,\nor \"Passive Abilities\" with this, an ability that automatically activates and run continuously (eg. not calling EndAbility)\n\nIn both case, GameplayAbilities configured to be activated on granted will only activate on server and typically have\na Net Execution Policy of Server Only.",
          "Description": "Activate on Granted:\r\nIf true, the ability will be automatically activated as soon as it is granted.\n\nYou can either implement one-off Abilities that are meant to be activated right away when granted,\nor \"Passive Abilities\" with this, an ability that automatically activates and run continuously (eg. not calling EndAbility)\n\nIn both case, GameplayAbilities configured to be activated on granted will only activate on server and typically have\na Net Execution Policy of Server Only.",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "bEnableAbilityQueue",
          "DisplayName": "Enable Ability Queue",
          "RawDescription": "Enable Ability Queue:\r\nEnable other abilities to be queued and activated when this ability ends.\n\nIt is recommended to leave this variable to false, and instead use the AbilityQueueNotifyState (AbilityQueueWindow)\nwithin montages to further tune when the Queue System is opened and closed.",
          "RawShortDescription": "Enable Ability Queue:\r\nEnable other abilities to be queued and activated when this ability ends.\n\nIt is recommended to leave this variable to false, and instead use the AbilityQueueNotifyState (AbilityQueueWindow)\nwithin montages to further tune when the Queue System is opened and closed.",
          "Tooltip": "Enable other abilities to be queued and activated when this ability ends.\n\nIt is recommended to leave this variable to false, and instead use the AbilityQueueNotifyState (AbilityQueueWindow)\nwithin montages to further tune when the Queue System is opened and closed.",
          "Description": "Enable Ability Queue:\r\nEnable other abilities to be queued and activated when this ability ends.\n\nIt is recommended to leave this variable to false, and instead use the AbilityQueueNotifyState (AbilityQueueWindow)\nwithin montages to further tune when the Queue System is opened and closed.",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "EffectContainerMap",
          "DisplayName": "Effect Container Map",
          "RawDescription": "Effect Container Map:\r\nMap of gameplay tags to gameplay effect containers",
          "RawShortDescription": "Effect Container Map:\r\nMap of gameplay tags to gameplay effect containers",
          "Tooltip": "Map of gameplay tags to gameplay effect containers",
          "Description": "Effect Container Map:\r\nMap of gameplay tags to gameplay effect containers",
          "CPPType": "TMap",
          "CPPTypeForwardDeclaration": "struct FGameplayTag; struct FGSCGameplayEffectContainer;",
          "Type": "TMap<FGameplayTag, FGSCGameplayEffectContainer>",
          "DisplayType": "Map of FGameplayTag to FGSCGameplayEffectContainer"
        }
      ],
      "Events": [
        {
          "Name": "OnAbilityEnded",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCGameplayAbility:OnAbilityEnded",
          "DisplayName": "On Ability Ended",
          "RawDescription": "On Ability Ended:\r\nCalled when the ability ends.",
          "RawShortDescription": "On Ability Ended:\r\nCalled when the ability ends.",
          "Description": "Called when the ability ends.",
          "Image": "GASCompanion/img/GSCGameplayAbility_OnAbilityEnded.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": []
        }
      ],
      "Functions": [
        {
          "Name": "MakeEffectContainerSpecFromContainer",
          "FullName": "Function /Script/GASCompanion.GSCGameplayAbility:MakeEffectContainerSpecFromContainer",
          "DisplayName": "Make Effect Container Spec from Container",
          "RawDescription": "Make gameplay effect container spec to be applied later, using the passed in container",
          "RawShortDescription": "Make gameplay effect container spec to be applied later, using the passed in container",
          "Description": "Make gameplay effect container spec to be applied later, using the passed in container",
          "Image": "GASCompanion/img/GSCGameplayAbility_MakeEffectContainerSpecFromContainer.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Container",
              "DisplayName": "Container",
              "RawDescription": "Container",
              "RawShortDescription": "Container",
              "Description": "",
              "CPPType": "FGSCGameplayEffectContainer",
              "CPPTypeForwardDeclaration": "struct FGSCGameplayEffectContainer;",
              "Type": "FGSCGameplayEffectContainer",
              "DisplayType": "FGSCGameplayEffectContainer"
            },
            {
              "Name": "EventData",
              "DisplayName": "Event Data",
              "RawDescription": "Event Data",
              "RawShortDescription": "Event Data",
              "Description": "",
              "CPPType": "FGameplayEventData",
              "CPPTypeForwardDeclaration": "struct FGameplayEventData;",
              "Type": "FGameplayEventData",
              "DisplayType": "FGameplayEventData"
            },
            {
              "Name": "OverrideGameplayLevel",
              "DisplayName": "Override Gameplay Level",
              "RawDescription": "Override Gameplay Level",
              "RawShortDescription": "Override Gameplay Level",
              "Description": "",
              "CPPType": "int32",
              "CPPTypeForwardDeclaration": "",
              "Type": "int32",
              "DisplayType": "int32"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "FGSCGameplayEffectContainerSpec",
            "CPPTypeForwardDeclaration": "struct FGSCGameplayEffectContainerSpec;",
            "Type": "FGSCGameplayEffectContainerSpec",
            "DisplayType": "FGSCGameplayEffectContainerSpec"
          }
        },
        {
          "Name": "MakeEffectContainerSpec",
          "FullName": "Function /Script/GASCompanion.GSCGameplayAbility:MakeEffectContainerSpec",
          "DisplayName": "Make Effect Container Spec",
          "RawDescription": "Search for and make a gameplay effect container spec to be applied later, from the EffectContainerMap",
          "RawShortDescription": "Search for and make a gameplay effect container spec to be applied later, from the EffectContainerMap",
          "Description": "Search for and make a gameplay effect container spec to be applied later, from the EffectContainerMap",
          "Image": "GASCompanion/img/GSCGameplayAbility_MakeEffectContainerSpec.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "ContainerTag",
              "DisplayName": "Container Tag",
              "RawDescription": "Container Tag",
              "RawShortDescription": "Container Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "EventData",
              "DisplayName": "Event Data",
              "RawDescription": "Event Data",
              "RawShortDescription": "Event Data",
              "Description": "",
              "CPPType": "FGameplayEventData",
              "CPPTypeForwardDeclaration": "struct FGameplayEventData;",
              "Type": "FGameplayEventData",
              "DisplayType": "FGameplayEventData"
            },
            {
              "Name": "OverrideGameplayLevel",
              "DisplayName": "Override Gameplay Level",
              "RawDescription": "Override Gameplay Level",
              "RawShortDescription": "Override Gameplay Level",
              "Description": "",
              "CPPType": "int32",
              "CPPTypeForwardDeclaration": "",
              "Type": "int32",
              "DisplayType": "int32"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "FGSCGameplayEffectContainerSpec",
            "CPPTypeForwardDeclaration": "struct FGSCGameplayEffectContainerSpec;",
            "Type": "FGSCGameplayEffectContainerSpec",
            "DisplayType": "FGSCGameplayEffectContainerSpec"
          }
        },
        {
          "Name": "ApplyEffectContainerSpec",
          "FullName": "Function /Script/GASCompanion.GSCGameplayAbility:ApplyEffectContainerSpec",
          "DisplayName": "Apply Effect Container Spec",
          "RawDescription": "Applies a gameplay effect container spec that was previously created",
          "RawShortDescription": "Applies a gameplay effect container spec that was previously created",
          "Description": "Applies a gameplay effect container spec that was previously created",
          "Image": "GASCompanion/img/GSCGameplayAbility_ApplyEffectContainerSpec.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "ContainerSpec",
              "DisplayName": "Container Spec",
              "RawDescription": "Container Spec",
              "RawShortDescription": "Container Spec",
              "Description": "",
              "CPPType": "FGSCGameplayEffectContainerSpec",
              "CPPTypeForwardDeclaration": "struct FGSCGameplayEffectContainerSpec;",
              "Type": "FGSCGameplayEffectContainerSpec",
              "DisplayType": "FGSCGameplayEffectContainerSpec"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "TArray",
            "CPPTypeForwardDeclaration": "struct FActiveGameplayEffectHandle;",
            "Type": "TArray<FActiveGameplayEffectHandle>",
            "DisplayType": "Array of FActiveGameplayEffectHandle"
          }
        },
        {
          "Name": "ApplyEffectContainer",
          "FullName": "Function /Script/GASCompanion.GSCGameplayAbility:ApplyEffectContainer",
          "DisplayName": "Apply Effect Container",
          "RawDescription": "Applies a gameplay effect container, by creating and then applying the spec",
          "RawShortDescription": "Applies a gameplay effect container, by creating and then applying the spec",
          "Description": "Applies a gameplay effect container, by creating and then applying the spec",
          "Image": "GASCompanion/img/GSCGameplayAbility_ApplyEffectContainer.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "ContainerTag",
              "DisplayName": "Container Tag",
              "RawDescription": "Container Tag",
              "RawShortDescription": "Container Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "EventData",
              "DisplayName": "Event Data",
              "RawDescription": "Event Data",
              "RawShortDescription": "Event Data",
              "Description": "",
              "CPPType": "FGameplayEventData",
              "CPPTypeForwardDeclaration": "struct FGameplayEventData;",
              "Type": "FGameplayEventData",
              "DisplayType": "FGameplayEventData"
            },
            {
              "Name": "OverrideGameplayLevel",
              "DisplayName": "Override Gameplay Level",
              "RawDescription": "Override Gameplay Level",
              "RawShortDescription": "Override Gameplay Level",
              "Description": "",
              "CPPType": "int32",
              "CPPTypeForwardDeclaration": "",
              "Type": "int32",
              "DisplayType": "int32"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "TArray",
            "CPPTypeForwardDeclaration": "struct FActiveGameplayEffectHandle;",
            "Type": "TArray<FActiveGameplayEffectHandle>",
            "DisplayType": "Array of FActiveGameplayEffectHandle"
          }
        }
      ]
    },
    {
      "Name": "GSCGameplayAbility_MeleeBase",
      "IncludePath": "Abilities/GSCGameplayAbility_MeleeBase.h",
      "Description": "GSCGameplay Ability Melee Base",
      "Properties": [
        {
          "Name": "Montages",
          "DisplayName": "Montages",
          "RawDescription": "Montages:\r\nList of animation montages you want to cycle through when activating this ability",
          "RawShortDescription": "Montages:\r\nList of animation montages you want to cycle through when activating this ability",
          "Tooltip": "List of animation montages you want to cycle through when activating this ability",
          "Description": "Montages:\r\nList of animation montages you want to cycle through when activating this ability",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "class UAnimMontage;",
          "Type": "TArray<UAnimMontage>",
          "DisplayType": "Array of UAnimMontage"
        },
        {
          "Name": "Rate",
          "DisplayName": "Rate",
          "RawDescription": "Rate:\r\nChange to play the montage faster or slower",
          "RawShortDescription": "Rate:\r\nChange to play the montage faster or slower",
          "Tooltip": "Change to play the montage faster or slower",
          "Description": "Rate:\r\nChange to play the montage faster or slower",
          "CPPType": "float",
          "CPPTypeForwardDeclaration": "",
          "Type": "float",
          "DisplayType": "float"
        },
        {
          "Name": "WaitForEventTag",
          "DisplayName": "Wait for Event Tag",
          "RawDescription": "Wait for Event Tag:\r\nAny gameplay events matching this tag will activate the OnEventReceived callback and apply the gameplay effect containers for this ability",
          "RawShortDescription": "Wait for Event Tag:\r\nAny gameplay events matching this tag will activate the OnEventReceived callback and apply the gameplay effect containers for this ability",
          "Tooltip": "Any gameplay events matching this tag will activate the OnEventReceived callback and apply the gameplay effect containers for this ability",
          "Description": "Wait for Event Tag:\r\nAny gameplay events matching this tag will activate the OnEventReceived callback and apply the gameplay effect containers for this ability",
          "CPPType": "FGameplayTagContainer",
          "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
          "Type": "FGameplayTagContainer",
          "DisplayType": "FGameplayTagContainer"
        }
      ],
      "Events": [],
      "Functions": [
        {
          "Name": "GetNextComboMontage",
          "FullName": "Function /Script/GASCompanion.GSCGameplayAbility_MeleeBase:GetNextComboMontage",
          "DisplayName": "Get Next Combo Montage",
          "RawDescription": "Get Next Combo Montage",
          "RawShortDescription": "Get Next Combo Montage",
          "Description": "Get Next Combo Montage",
          "Image": "GASCompanion/img/GSCGameplayAbility_MeleeBase_GetNextComboMontage.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "UAnimMontage*",
            "CPPTypeForwardDeclaration": "class UAnimMontage;",
            "Type": "UAnimMontage*",
            "DisplayType": "UAnimMontage*"
          }
        }
      ]
    },
    {
      "Name": "GSCLinkAnimLayersComponent",
      "IncludePath": "Components/GSCLinkAnimLayersComponent.h",
      "Description": "Modular pawn component for \"pushing\" linked anim layers to a Character",
      "Properties": [
        {
          "Name": "LayerTypes",
          "DisplayName": "Layer Types",
          "RawDescription": "Layer Types:\r\nList of Anim Instances Classes to link to owner skeletal mesh component",
          "RawShortDescription": "Layer Types:\r\nList of Anim Instances Classes to link to owner skeletal mesh component",
          "Tooltip": "List of Anim Instances Classes to link to owner skeletal mesh component",
          "Description": "Layer Types:\r\nList of Anim Instances Classes to link to owner skeletal mesh component",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "class UAnimInstance;",
          "Type": "TArray<UAnimInstance>",
          "DisplayType": "Array of UAnimInstance"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCModularActor",
      "IncludePath": "ModularGameplayActors/GSCModularActor.h",
      "Description": "Minimal class that supports extension by game feature plugins, direct child of AActor",
      "Properties": [
        {
          "Name": "ReplicationMode",
          "DisplayName": "Replication Mode",
          "RawDescription": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "RawShortDescription": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "Tooltip": "Ability System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\n@See https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "Description": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "CPPType": "EGameplayEffectReplicationMode",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectReplicationMode : uint8;",
          "Type": "EGameplayEffectReplicationMode",
          "DisplayType": "EGameplayEffectReplicationMode"
        },
        {
          "Name": "AbilitySystemComponent",
          "DisplayName": "Ability System Component",
          "RawDescription": "Ability System Component",
          "RawShortDescription": "Ability System Component",
          "Tooltip": "",
          "Description": "Ability System Component",
          "CPPType": "UGSCAbilitySystemComponent*",
          "CPPTypeForwardDeclaration": "class UGSCAbilitySystemComponent;",
          "Type": "UGSCAbilitySystemComponent*",
          "DisplayType": "UGSCAbilitySystemComponent*"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCModularCharacter",
      "IncludePath": "ModularGameplayActors/GSCModularCharacter.h",
      "Description": "Minimal class that supports extension by game feature plugins\n\nIntended to be used for ACharacters using AbilitySystemComponent living on Pawns",
      "Properties": [
        {
          "Name": "ReplicationMode",
          "DisplayName": "Replication Mode",
          "RawDescription": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "RawShortDescription": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "Tooltip": "Ability System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\n@See https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "Description": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "CPPType": "EGameplayEffectReplicationMode",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectReplicationMode : uint8;",
          "Type": "EGameplayEffectReplicationMode",
          "DisplayType": "EGameplayEffectReplicationMode"
        },
        {
          "Name": "AbilitySystemComponent",
          "DisplayName": "Ability System Component",
          "RawDescription": "Ability System Component",
          "RawShortDescription": "Ability System Component",
          "Tooltip": "",
          "Description": "Ability System Component",
          "CPPType": "UGSCAbilitySystemComponent*",
          "CPPTypeForwardDeclaration": "class UGSCAbilitySystemComponent;",
          "Type": "UGSCAbilitySystemComponent*",
          "DisplayType": "UGSCAbilitySystemComponent*"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCModularDefaultPawn",
      "IncludePath": "ModularGameplayActors/GSCModularDefaultPawn.h",
      "Description": "Minimal class that supports extension by game feature plugins, direct child of ADefaultPawn",
      "Properties": [
        {
          "Name": "ReplicationMode",
          "DisplayName": "Replication Mode",
          "RawDescription": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "RawShortDescription": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "Tooltip": "Ability System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\n@See https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "Description": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "CPPType": "EGameplayEffectReplicationMode",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectReplicationMode : uint8;",
          "Type": "EGameplayEffectReplicationMode",
          "DisplayType": "EGameplayEffectReplicationMode"
        },
        {
          "Name": "AbilitySystemComponent",
          "DisplayName": "Ability System Component",
          "RawDescription": "Ability System Component",
          "RawShortDescription": "Ability System Component",
          "Tooltip": "",
          "Description": "Ability System Component",
          "CPPType": "UGSCAbilitySystemComponent*",
          "CPPTypeForwardDeclaration": "class UGSCAbilitySystemComponent;",
          "Type": "UGSCAbilitySystemComponent*",
          "DisplayType": "UGSCAbilitySystemComponent*"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCModularPawn",
      "IncludePath": "ModularGameplayActors/GSCModularPawn.h",
      "Description": "Minimal class that supports extension by game feature plugins, direct child of APawn",
      "Properties": [
        {
          "Name": "ReplicationMode",
          "DisplayName": "Replication Mode",
          "RawDescription": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "RawShortDescription": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "Tooltip": "Ability System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\n@See https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "Description": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "CPPType": "EGameplayEffectReplicationMode",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectReplicationMode : uint8;",
          "Type": "EGameplayEffectReplicationMode",
          "DisplayType": "EGameplayEffectReplicationMode"
        },
        {
          "Name": "AbilitySystemComponent",
          "DisplayName": "Ability System Component",
          "RawDescription": "Ability System Component",
          "RawShortDescription": "Ability System Component",
          "Tooltip": "",
          "Description": "Ability System Component",
          "CPPType": "UGSCAbilitySystemComponent*",
          "CPPTypeForwardDeclaration": "class UGSCAbilitySystemComponent;",
          "Type": "UGSCAbilitySystemComponent*",
          "DisplayType": "UGSCAbilitySystemComponent*"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCModularPlayerState",
      "IncludePath": "ModularGameplayActors/GSCModularPlayerState.h",
      "Description": "Minimal class that supports extension by game feature plugins",
      "Properties": [
        {
          "Name": "ReplicationMode",
          "DisplayName": "Replication Mode",
          "RawDescription": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "RawShortDescription": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "Tooltip": "Ability System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\n@See https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "Description": "Replication Mode:\r\nAbility System Replication Mode: How gameplay effects will be replicated to clients\n\n- Full: Replicate full gameplay info to all. Every GameplayEffect is replicated to every client.\n(Recommended for Single Player games)\n- Mixed: Only replicate minimal gameplay effect info to simulated proxies but full info to owners and autonomous proxies.\nGameplayEffects are only replicated to the owning client. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on Player controlled Actors)\n- Minimal: Only replicate minimal gameplay effect info. Note: this does not work for Owned AbilitySystemComponents (Use Mixed instead).\nGameplayEffects are never replicated to anyone. Only GameplayTags and GameplayCues are replicated to everyone.\n(Recommended for Multiplayer on AI controlled Actors)\n\nSee: https://github.com/tranek/GASDocumentation#concepts-asc-rm for more information",
          "CPPType": "EGameplayEffectReplicationMode",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectReplicationMode : uint8;",
          "Type": "EGameplayEffectReplicationMode",
          "DisplayType": "EGameplayEffectReplicationMode"
        },
        {
          "Name": "AbilitySystemComponent",
          "DisplayName": "Ability System Component",
          "RawDescription": "Ability System Component",
          "RawShortDescription": "Ability System Component",
          "Tooltip": "",
          "Description": "Ability System Component",
          "CPPType": "UGSCAbilitySystemComponent*",
          "CPPTypeForwardDeclaration": "class UGSCAbilitySystemComponent;",
          "Type": "UGSCAbilitySystemComponent*",
          "DisplayType": "UGSCAbilitySystemComponent*"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCNativeAnimInstance",
      "IncludePath": "Animations/GSCNativeAnimInstance.h",
      "Description": "Anim instance implementing IGSCNativeAnimInstanceInterface to allow Gameplay Tag Blueprint Property Mapping.\n\nThe interface has only one overridable method `InitializeWithAbilitySystem()` that must be implemented in subclasses.\n\nGSCAbilitySystemComponent will call this method via an interface call when InitAbilityActorInfo happens.\n\nThe same pattern is used in both Lyra and the Ancient Demo, only difference here is that we rely on an interface to be able to operate better with other plugins / assets.",
      "Properties": [
        {
          "Name": "GameplayTagPropertyMap",
          "DisplayName": "Gameplay Tag Property Map",
          "RawDescription": "Gameplay Tag Property Map:\r\nGameplay tags that can be mapped to blueprint variables. The variables will automatically update as the tags are added or removed.\n\nThese should be used instead of manually querying for the gameplay tags.",
          "RawShortDescription": "Gameplay Tag Property Map:\r\nGameplay tags that can be mapped to blueprint variables. The variables will automatically update as the tags are added or removed.\n\nThese should be used instead of manually querying for the gameplay tags.",
          "Tooltip": "Gameplay tags that can be mapped to blueprint variables. The variables will automatically update as the tags are added or removed.\n\nThese should be used instead of manually querying for the gameplay tags.",
          "Description": "Gameplay Tag Property Map:\r\nGameplay tags that can be mapped to blueprint variables. The variables will automatically update as the tags are added or removed.\n\nThese should be used instead of manually querying for the gameplay tags.",
          "CPPType": "FGameplayTagBlueprintPropertyMap",
          "CPPTypeForwardDeclaration": "struct FGameplayTagBlueprintPropertyMap;",
          "Type": "FGameplayTagBlueprintPropertyMap",
          "DisplayType": "FGameplayTagBlueprintPropertyMap"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCTargetType",
      "IncludePath": "Abilities/GSCTargetType.h",
      "Description": "Class that is used to determine targeting for abilities\n\nIt is meant to be blueprinted to run target logic\n\nThis does not subclass GameplayAbilityTargetActor because this class is never instanced into the world\n\nThis can be used as a basis for a game-specific targeting blueprint .If your targeting is more complicated\nyou may need to instance into the world once or as a pooled actor",
      "Properties": [],
      "Events": [
        {
          "Name": "GetTargets",
          "FullName": "Function /Script/GASCompanion.GSCTargetType:GetTargets",
          "DisplayName": "Get Targets",
          "RawDescription": "Called to determine targets to apply gameplay effects to",
          "RawShortDescription": "Called to determine targets to apply gameplay effects to",
          "Description": "Called to determine targets to apply gameplay effects to",
          "Image": "GASCompanion/img/GSCTargetType_GetTargets.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "TargetingActor",
              "DisplayName": "Targeting Actor",
              "RawDescription": "Targeting Actor",
              "RawShortDescription": "Targeting Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            },
            {
              "Name": "EventData",
              "DisplayName": "Event Data",
              "RawDescription": "Event Data",
              "RawShortDescription": "Event Data",
              "Description": "",
              "CPPType": "FGameplayEventData",
              "CPPTypeForwardDeclaration": "struct FGameplayEventData;",
              "Type": "FGameplayEventData",
              "DisplayType": "FGameplayEventData"
            },
            {
              "Name": "OutHitResults",
              "DisplayName": "Out Hit Results",
              "RawDescription": "Out Hit Results",
              "RawShortDescription": "Out Hit Results",
              "Description": "",
              "CPPType": "TArray",
              "CPPTypeForwardDeclaration": "struct FHitResult;",
              "Type": "TArray<FHitResult>",
              "DisplayType": "Array of FHitResult"
            },
            {
              "Name": "OutActors",
              "DisplayName": "Out Actors",
              "RawDescription": "Out Actors",
              "RawShortDescription": "Out Actors",
              "Description": "",
              "CPPType": "TArray",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "TArray<AActor>",
              "DisplayType": "Array of AActor"
            }
          ]
        }
      ],
      "Functions": []
    },
    {
      "Name": "GSCTask_PlayMontageWaitForEvent",
      "IncludePath": "Abilities/Tasks/GSCTask_PlayMontageWaitForEvent.h",
      "Description": "This task combines PlayMontageAndWait and WaitForEvent into one task, so you can wait for multiple\ntypes of activations such as from a melee combo\n\nMuch of this code is copied from one of those two ability tasks\n\nThis is a good task to look at as an example when creating game-specific tasks\n\nIt is expected that each game will have a set of game-specific tasks to do what they want",
      "Properties": [],
      "Events": [
        {
          "Name": "OnCompleted",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCTask_PlayMontageWaitForEvent:OnCompleted",
          "DisplayName": "On Completed",
          "RawDescription": "On Completed:\r\nThe montage completely finished playing",
          "RawShortDescription": "On Completed:\r\nThe montage completely finished playing",
          "Description": "The montage completely finished playing",
          "Image": "GASCompanion/img/GSCTask_PlayMontageWaitForEvent_OnCompleted.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "EventTag",
              "DisplayName": "Event Tag",
              "RawDescription": "Event Tag",
              "RawShortDescription": "Event Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "EventData",
              "DisplayName": "Event Data",
              "RawDescription": "Event Data",
              "RawShortDescription": "Event Data",
              "Description": "",
              "CPPType": "FGameplayEventData",
              "CPPTypeForwardDeclaration": "struct FGameplayEventData;",
              "Type": "FGameplayEventData",
              "DisplayType": "FGameplayEventData"
            }
          ]
        },
        {
          "Name": "OnBlendOut",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCTask_PlayMontageWaitForEvent:OnBlendOut",
          "DisplayName": "On Blend Out",
          "RawDescription": "On Blend Out:\r\nThe montage started blending out",
          "RawShortDescription": "On Blend Out:\r\nThe montage started blending out",
          "Description": "The montage started blending out",
          "Image": "GASCompanion/img/GSCTask_PlayMontageWaitForEvent_OnBlendOut.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "EventTag",
              "DisplayName": "Event Tag",
              "RawDescription": "Event Tag",
              "RawShortDescription": "Event Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "EventData",
              "DisplayName": "Event Data",
              "RawDescription": "Event Data",
              "RawShortDescription": "Event Data",
              "Description": "",
              "CPPType": "FGameplayEventData",
              "CPPTypeForwardDeclaration": "struct FGameplayEventData;",
              "Type": "FGameplayEventData",
              "DisplayType": "FGameplayEventData"
            }
          ]
        },
        {
          "Name": "OnInterrupted",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCTask_PlayMontageWaitForEvent:OnInterrupted",
          "DisplayName": "On Interrupted",
          "RawDescription": "On Interrupted:\r\nThe montage was interrupted",
          "RawShortDescription": "On Interrupted:\r\nThe montage was interrupted",
          "Description": "The montage was interrupted",
          "Image": "GASCompanion/img/GSCTask_PlayMontageWaitForEvent_OnInterrupted.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "EventTag",
              "DisplayName": "Event Tag",
              "RawDescription": "Event Tag",
              "RawShortDescription": "Event Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "EventData",
              "DisplayName": "Event Data",
              "RawDescription": "Event Data",
              "RawShortDescription": "Event Data",
              "Description": "",
              "CPPType": "FGameplayEventData",
              "CPPTypeForwardDeclaration": "struct FGameplayEventData;",
              "Type": "FGameplayEventData",
              "DisplayType": "FGameplayEventData"
            }
          ]
        },
        {
          "Name": "OnCancelled",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCTask_PlayMontageWaitForEvent:OnCancelled",
          "DisplayName": "On Cancelled",
          "RawDescription": "On Cancelled:\r\nThe ability task was explicitly cancelled by another ability",
          "RawShortDescription": "On Cancelled:\r\nThe ability task was explicitly cancelled by another ability",
          "Description": "The ability task was explicitly cancelled by another ability",
          "Image": "GASCompanion/img/GSCTask_PlayMontageWaitForEvent_OnCancelled.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "EventTag",
              "DisplayName": "Event Tag",
              "RawDescription": "Event Tag",
              "RawShortDescription": "Event Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "EventData",
              "DisplayName": "Event Data",
              "RawDescription": "Event Data",
              "RawShortDescription": "Event Data",
              "Description": "",
              "CPPType": "FGameplayEventData",
              "CPPTypeForwardDeclaration": "struct FGameplayEventData;",
              "Type": "FGameplayEventData",
              "DisplayType": "FGameplayEventData"
            }
          ]
        },
        {
          "Name": "EventReceived",
          "FullName": "MulticastInlineDelegateProperty /Script/GASCompanion.GSCTask_PlayMontageWaitForEvent:EventReceived",
          "DisplayName": "Event Received",
          "RawDescription": "Event Received:\r\nOne of the triggering gameplay events happened",
          "RawShortDescription": "Event Received:\r\nOne of the triggering gameplay events happened",
          "Description": "One of the triggering gameplay events happened",
          "Image": "GASCompanion/img/GSCTask_PlayMontageWaitForEvent_EventReceived.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "EventTag",
              "DisplayName": "Event Tag",
              "RawDescription": "Event Tag",
              "RawShortDescription": "Event Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "EventData",
              "DisplayName": "Event Data",
              "RawDescription": "Event Data",
              "RawShortDescription": "Event Data",
              "Description": "",
              "CPPType": "FGameplayEventData",
              "CPPTypeForwardDeclaration": "struct FGameplayEventData;",
              "Type": "FGameplayEventData",
              "DisplayType": "FGameplayEventData"
            }
          ]
        }
      ],
      "Functions": [
        {
          "Name": "UnbindAllDelegate",
          "FullName": "Function /Script/GASCompanion.GSCTask_PlayMontageWaitForEvent:UnbindAllDelegate",
          "DisplayName": "Unbind All Delegate",
          "RawDescription": "Unbinds all animation delegate on this Ability Task (except OnCanceled)",
          "RawShortDescription": "Unbinds all animation delegate on this Ability Task (except OnCanceled)",
          "Description": "Unbinds all animation delegate on this Ability Task (except OnCanceled)",
          "Image": "GASCompanion/img/GSCTask_PlayMontageWaitForEvent_UnbindAllDelegate.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": []
        }
      ]
    },
    {
      "Name": "GSCTemplate_GameplayEffectDefinition",
      "IncludePath": "Templates/GSCTemplate_GameplayEffectDefinition.h",
      "Description": "Parent class for Gameplay Effect Templates.\n\nTemplates are one of special kind. They are only meant to be used to create other Gameplay Effect\nbased on their Class Default Object, and not meant to be used directly or inherited.\n\nThese are not child of UGameplayEffect, but rather an UObject sharing the exact same properties as UGameplayEffect.\n\nThis class exists only to allow creation of GE templates Blueprint, that can be configured in Project Settings, without\nhaving them interfere with standard Gameplay Effects dropdown in properties and nodes like ApplyGameplayEffect.\n\nWhen a new GE is created from a template, a real UGameplayEffect Blueprint is created based on the properties defined by the template.",
      "Properties": [
        {
          "Name": "DurationPolicy",
          "DisplayName": "Duration Policy",
          "RawDescription": "Duration Policy:\r\nPolicy for the duration of this effect",
          "RawShortDescription": "Duration Policy:\r\nPolicy for the duration of this effect",
          "Tooltip": "Policy for the duration of this effect",
          "Description": "Duration Policy:\r\nPolicy for the duration of this effect",
          "CPPType": "EGameplayEffectDurationType",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectDurationType : uint8;",
          "Type": "EGameplayEffectDurationType",
          "DisplayType": "EGameplayEffectDurationType"
        },
        {
          "Name": "DurationMagnitude",
          "DisplayName": "Duration Magnitude",
          "RawDescription": "Duration Magnitude:\r\nDuration in seconds. 0.0 for instantaneous effects; -1.0 for infinite duration.",
          "RawShortDescription": "Duration Magnitude:\r\nDuration in seconds. 0.0 for instantaneous effects; -1.0 for infinite duration.",
          "Tooltip": "Duration in seconds. 0.0 for instantaneous effects; -1.0 for infinite duration.",
          "Description": "Duration Magnitude:\r\nDuration in seconds. 0.0 for instantaneous effects; -1.0 for infinite duration.",
          "CPPType": "FGameplayEffectModifierMagnitude",
          "CPPTypeForwardDeclaration": "struct FGameplayEffectModifierMagnitude;",
          "Type": "FGameplayEffectModifierMagnitude",
          "DisplayType": "FGameplayEffectModifierMagnitude"
        },
        {
          "Name": "Period",
          "DisplayName": "Period",
          "RawDescription": "Period:\r\nPeriod in seconds. 0.0 for non-periodic effects",
          "RawShortDescription": "Period:\r\nPeriod in seconds. 0.0 for non-periodic effects",
          "Tooltip": "Period in seconds. 0.0 for non-periodic effects",
          "Description": "Period:\r\nPeriod in seconds. 0.0 for non-periodic effects",
          "CPPType": "FScalableFloat",
          "CPPTypeForwardDeclaration": "struct FScalableFloat;",
          "Type": "FScalableFloat",
          "DisplayType": "FScalableFloat"
        },
        {
          "Name": "bExecutePeriodicEffectOnApplication",
          "DisplayName": "Execute Periodic Effect on Application",
          "RawDescription": "Execute Periodic Effect on Application:\r\nIf true, the effect executes on application and then at every period interval. If false, no execution occurs until the first period elapses.",
          "RawShortDescription": "Execute Periodic Effect on Application:\r\nIf true, the effect executes on application and then at every period interval. If false, no execution occurs until the first period elapses.",
          "Tooltip": "If true, the effect executes on application and then at every period interval. If false, no execution occurs until the first period elapses.",
          "Description": "Execute Periodic Effect on Application:\r\nIf true, the effect executes on application and then at every period interval. If false, no execution occurs until the first period elapses.",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "PeriodicInhibitionPolicy",
          "DisplayName": "Periodic Inhibition Policy",
          "RawDescription": "Periodic Inhibition Policy",
          "RawShortDescription": "Periodic Inhibition Policy",
          "Tooltip": "",
          "Description": "Periodic Inhibition Policy",
          "CPPType": "EGameplayEffectPeriodInhibitionRemovedPolicy",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectPeriodInhibitionRemovedPolicy : uint8;",
          "Type": "EGameplayEffectPeriodInhibitionRemovedPolicy",
          "DisplayType": "EGameplayEffectPeriodInhibitionRemovedPolicy"
        },
        {
          "Name": "Modifiers",
          "DisplayName": "Modifiers",
          "RawDescription": "Modifiers:\r\nArray of modifiers that will affect the target of this effect",
          "RawShortDescription": "Modifiers:\r\nArray of modifiers that will affect the target of this effect",
          "Tooltip": "Array of modifiers that will affect the target of this effect",
          "Description": "Modifiers:\r\nArray of modifiers that will affect the target of this effect",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FGameplayModifierInfo;",
          "Type": "TArray<FGameplayModifierInfo>",
          "DisplayType": "Array of FGameplayModifierInfo"
        },
        {
          "Name": "Executions",
          "DisplayName": "Executions",
          "RawDescription": "Executions",
          "RawShortDescription": "Executions",
          "Tooltip": "",
          "Description": "Executions",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FGameplayEffectExecutionDefinition;",
          "Type": "TArray<FGameplayEffectExecutionDefinition>",
          "DisplayType": "Array of FGameplayEffectExecutionDefinition"
        },
        {
          "Name": "ChanceToApplyToTarget",
          "DisplayName": "Chance to Apply to Target",
          "RawDescription": "Chance to Apply to Target:\r\nProbability that this gameplay effect will be applied to the target actor (0.0 for never, 1.0 for always)",
          "RawShortDescription": "Chance to Apply to Target:\r\nProbability that this gameplay effect will be applied to the target actor (0.0 for never, 1.0 for always)",
          "Tooltip": "Probability that this gameplay effect will be applied to the target actor (0.0 for never, 1.0 for always)",
          "Description": "Chance to Apply to Target:\r\nProbability that this gameplay effect will be applied to the target actor (0.0 for never, 1.0 for always)",
          "CPPType": "FScalableFloat",
          "CPPTypeForwardDeclaration": "struct FScalableFloat;",
          "Type": "FScalableFloat",
          "DisplayType": "FScalableFloat"
        },
        {
          "Name": "ApplicationRequirements",
          "DisplayName": "Application Requirement",
          "RawDescription": "Application Requirements",
          "RawShortDescription": "Application Requirements",
          "Tooltip": "",
          "Description": "Application Requirements",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "class UGameplayEffectCustomApplicationRequirement;",
          "Type": "TArray<UGameplayEffectCustomApplicationRequirement>",
          "DisplayType": "Array of UGameplayEffectCustomApplicationRequirement"
        },
        {
          "Name": "ConditionalGameplayEffects",
          "DisplayName": "Conditional Gameplay Effects",
          "RawDescription": "Conditional Gameplay Effects:\r\nother gameplay effects that will be applied to the target of this effect if this effect applies",
          "RawShortDescription": "Conditional Gameplay Effects:\r\nother gameplay effects that will be applied to the target of this effect if this effect applies",
          "Tooltip": "other gameplay effects that will be applied to the target of this effect if this effect applies",
          "Description": "Conditional Gameplay Effects:\r\nother gameplay effects that will be applied to the target of this effect if this effect applies",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FConditionalGameplayEffect;",
          "Type": "TArray<FConditionalGameplayEffect>",
          "DisplayType": "Array of FConditionalGameplayEffect"
        },
        {
          "Name": "OverflowEffects",
          "DisplayName": "Overflow Effects",
          "RawDescription": "Overflow Effects:\r\nEffects to apply when a stacking effect \"overflows\" its stack count through another attempted application. Added whether the overflow application succeeds or not.",
          "RawShortDescription": "Overflow Effects:\r\nEffects to apply when a stacking effect \"overflows\" its stack count through another attempted application. Added whether the overflow application succeeds or not.",
          "Tooltip": "Effects to apply when a stacking effect \"overflows\" its stack count through another attempted application. Added whether the overflow application succeeds or not.",
          "Description": "Overflow Effects:\r\nEffects to apply when a stacking effect \"overflows\" its stack count through another attempted application. Added whether the overflow application succeeds or not.",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "class UGameplayEffect;",
          "Type": "TArray<UGameplayEffect>",
          "DisplayType": "Array of UGameplayEffect"
        },
        {
          "Name": "bDenyOverflowApplication",
          "DisplayName": "Deny Overflow Application",
          "RawDescription": "Deny Overflow Application:\r\nIf true, stacking attempts made while at the stack count will fail, resulting in the duration and context not being refreshed",
          "RawShortDescription": "Deny Overflow Application:\r\nIf true, stacking attempts made while at the stack count will fail, resulting in the duration and context not being refreshed",
          "Tooltip": "If true, stacking attempts made while at the stack count will fail, resulting in the duration and context not being refreshed",
          "Description": "Deny Overflow Application:\r\nIf true, stacking attempts made while at the stack count will fail, resulting in the duration and context not being refreshed",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "bClearStackOnOverflow",
          "DisplayName": "Clear Stack on Overflow",
          "RawDescription": "Clear Stack on Overflow:\r\nIf true, the entire stack of the effect will be cleared once it overflows",
          "RawShortDescription": "Clear Stack on Overflow:\r\nIf true, the entire stack of the effect will be cleared once it overflows",
          "Tooltip": "If true, the entire stack of the effect will be cleared once it overflows",
          "Description": "Clear Stack on Overflow:\r\nIf true, the entire stack of the effect will be cleared once it overflows",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "PrematureExpirationEffectClasses",
          "DisplayName": "Premature Expiration Effect Classes",
          "RawDescription": "Premature Expiration Effect Classes:\r\nEffects to apply when this effect is made to expire prematurely (like via a forced removal, clear tags, etc.); Only works for effects with a duration",
          "RawShortDescription": "Premature Expiration Effect Classes:\r\nEffects to apply when this effect is made to expire prematurely (like via a forced removal, clear tags, etc.); Only works for effects with a duration",
          "Tooltip": "Effects to apply when this effect is made to expire prematurely (like via a forced removal, clear tags, etc.); Only works for effects with a duration",
          "Description": "Premature Expiration Effect Classes:\r\nEffects to apply when this effect is made to expire prematurely (like via a forced removal, clear tags, etc.); Only works for effects with a duration",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "class UGameplayEffect;",
          "Type": "TArray<UGameplayEffect>",
          "DisplayType": "Array of UGameplayEffect"
        },
        {
          "Name": "RoutineExpirationEffectClasses",
          "DisplayName": "Routine Expiration Effect Classes",
          "RawDescription": "Routine Expiration Effect Classes:\r\nEffects to apply when this effect expires naturally via its duration; Only works for effects with a duration",
          "RawShortDescription": "Routine Expiration Effect Classes:\r\nEffects to apply when this effect expires naturally via its duration; Only works for effects with a duration",
          "Tooltip": "Effects to apply when this effect expires naturally via its duration; Only works for effects with a duration",
          "Description": "Routine Expiration Effect Classes:\r\nEffects to apply when this effect expires naturally via its duration; Only works for effects with a duration",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "class UGameplayEffect;",
          "Type": "TArray<UGameplayEffect>",
          "DisplayType": "Array of UGameplayEffect"
        },
        {
          "Name": "bRequireModifierSuccessToTriggerCues",
          "DisplayName": "Require Modifier Success to Trigger Cues",
          "RawDescription": "Require Modifier Success to Trigger Cues:\r\nIf true, cues will only trigger when GE modifiers succeed being applied (whether through modifiers or executions)",
          "RawShortDescription": "Require Modifier Success to Trigger Cues:\r\nIf true, cues will only trigger when GE modifiers succeed being applied (whether through modifiers or executions)",
          "Tooltip": "If true, cues will only trigger when GE modifiers succeed being applied (whether through modifiers or executions)",
          "Description": "Require Modifier Success to Trigger Cues:\r\nIf true, cues will only trigger when GE modifiers succeed being applied (whether through modifiers or executions)",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "bSuppressStackingCues",
          "DisplayName": "Suppress Stacking Cues",
          "RawDescription": "Suppress Stacking Cues:\r\nIf true, GameplayCues will only be triggered for the first instance in a stacking GameplayEffect.",
          "RawShortDescription": "Suppress Stacking Cues:\r\nIf true, GameplayCues will only be triggered for the first instance in a stacking GameplayEffect.",
          "Tooltip": "If true, GameplayCues will only be triggered for the first instance in a stacking GameplayEffect.",
          "Description": "Suppress Stacking Cues:\r\nIf true, GameplayCues will only be triggered for the first instance in a stacking GameplayEffect.",
          "CPPType": "bool",
          "CPPTypeForwardDeclaration": "",
          "Type": "bool",
          "DisplayType": "bool"
        },
        {
          "Name": "GameplayCues",
          "DisplayName": "Gameplay Cues",
          "RawDescription": "Gameplay Cues:\r\nCues to trigger non-simulated reactions in response to this GameplayEffect such as sounds, particle effects, etc",
          "RawShortDescription": "Gameplay Cues:\r\nCues to trigger non-simulated reactions in response to this GameplayEffect such as sounds, particle effects, etc",
          "Tooltip": "Cues to trigger non-simulated reactions in response to this GameplayEffect such as sounds, particle effects, etc",
          "Description": "Gameplay Cues:\r\nCues to trigger non-simulated reactions in response to this GameplayEffect such as sounds, particle effects, etc",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FGameplayEffectCue;",
          "Type": "TArray<FGameplayEffectCue>",
          "DisplayType": "Array of FGameplayEffectCue"
        },
        {
          "Name": "UIData",
          "DisplayName": "UIData",
          "RawDescription": "UIData:\r\nData for the UI representation of this effect. This should include things like text, icons, etc. Not available in server-only builds.",
          "RawShortDescription": "UIData:\r\nData for the UI representation of this effect. This should include things like text, icons, etc. Not available in server-only builds.",
          "Tooltip": "Data for the UI representation of this effect. This should include things like text, icons, etc. Not available in server-only builds.",
          "Description": "UIData:\r\nData for the UI representation of this effect. This should include things like text, icons, etc. Not available in server-only builds.",
          "CPPType": "UGameplayEffectUIData*",
          "CPPTypeForwardDeclaration": "class UGameplayEffectUIData;",
          "Type": "UGameplayEffectUIData*",
          "DisplayType": "UGameplayEffectUIData*"
        },
        {
          "Name": "InheritableGameplayEffectTags",
          "DisplayName": "GameplayEffectAssetTag",
          "RawDescription": "Inheritable Gameplay Effect Tags:\r\nThe GameplayEffect's Tags: tags the the GE *has* and DOES NOT give to the actor.",
          "RawShortDescription": "Inheritable Gameplay Effect Tags:\r\nThe GameplayEffect's Tags: tags the the GE *has* and DOES NOT give to the actor.",
          "Tooltip": "The GameplayEffect's Tags: tags the the GE *has* and DOES NOT give to the actor.",
          "Description": "Inheritable Gameplay Effect Tags:\r\nThe GameplayEffect's Tags: tags the the GE *has* and DOES NOT give to the actor.",
          "CPPType": "FInheritedTagContainer",
          "CPPTypeForwardDeclaration": "struct FInheritedTagContainer;",
          "Type": "FInheritedTagContainer",
          "DisplayType": "FInheritedTagContainer"
        },
        {
          "Name": "InheritableOwnedTagsContainer",
          "DisplayName": "GrantedTags",
          "RawDescription": "Inheritable Owned Tags Container:\r\n\"These tags are applied to the actor I am applied to\"",
          "RawShortDescription": "Inheritable Owned Tags Container:\r\n\"These tags are applied to the actor I am applied to\"",
          "Tooltip": "\"These tags are applied to the actor I am applied to\"",
          "Description": "Inheritable Owned Tags Container:\r\n\"These tags are applied to the actor I am applied to\"",
          "CPPType": "FInheritedTagContainer",
          "CPPTypeForwardDeclaration": "struct FInheritedTagContainer;",
          "Type": "FInheritedTagContainer",
          "DisplayType": "FInheritedTagContainer"
        },
        {
          "Name": "OngoingTagRequirements",
          "DisplayName": "Ongoing Tag Requirements",
          "RawDescription": "Ongoing Tag Requirements:\r\nOnce Applied, these tags requirements are used to determined if the GameplayEffect is \"on\" or \"off\". A GameplayEffect can be off and do nothing, but still applied.",
          "RawShortDescription": "Ongoing Tag Requirements:\r\nOnce Applied, these tags requirements are used to determined if the GameplayEffect is \"on\" or \"off\". A GameplayEffect can be off and do nothing, but still applied.",
          "Tooltip": "Once Applied, these tags requirements are used to determined if the GameplayEffect is \"on\" or \"off\". A GameplayEffect can be off and do nothing, but still applied.",
          "Description": "Ongoing Tag Requirements:\r\nOnce Applied, these tags requirements are used to determined if the GameplayEffect is \"on\" or \"off\". A GameplayEffect can be off and do nothing, but still applied.",
          "CPPType": "FGameplayTagRequirements",
          "CPPTypeForwardDeclaration": "struct FGameplayTagRequirements;",
          "Type": "FGameplayTagRequirements",
          "DisplayType": "FGameplayTagRequirements"
        },
        {
          "Name": "ApplicationTagRequirements",
          "DisplayName": "Application Tag Requirements",
          "RawDescription": "Application Tag Requirements:\r\nTag requirements for this GameplayEffect to be applied to a target. This is pass/fail at the time of application. If fail, this GE fails to apply.",
          "RawShortDescription": "Application Tag Requirements:\r\nTag requirements for this GameplayEffect to be applied to a target. This is pass/fail at the time of application. If fail, this GE fails to apply.",
          "Tooltip": "Tag requirements for this GameplayEffect to be applied to a target. This is pass/fail at the time of application. If fail, this GE fails to apply.",
          "Description": "Application Tag Requirements:\r\nTag requirements for this GameplayEffect to be applied to a target. This is pass/fail at the time of application. If fail, this GE fails to apply.",
          "CPPType": "FGameplayTagRequirements",
          "CPPTypeForwardDeclaration": "struct FGameplayTagRequirements;",
          "Type": "FGameplayTagRequirements",
          "DisplayType": "FGameplayTagRequirements"
        },
        {
          "Name": "RemovalTagRequirements",
          "DisplayName": "Removal Tag Requirements",
          "RawDescription": "Removal Tag Requirements:\r\nTag requirements that if met will remove this effect. Also prevents effect application.",
          "RawShortDescription": "Removal Tag Requirements:\r\nTag requirements that if met will remove this effect. Also prevents effect application.",
          "Tooltip": "Tag requirements that if met will remove this effect. Also prevents effect application.",
          "Description": "Removal Tag Requirements:\r\nTag requirements that if met will remove this effect. Also prevents effect application.",
          "CPPType": "FGameplayTagRequirements",
          "CPPTypeForwardDeclaration": "struct FGameplayTagRequirements;",
          "Type": "FGameplayTagRequirements",
          "DisplayType": "FGameplayTagRequirements"
        },
        {
          "Name": "RemoveGameplayEffectsWithTags",
          "DisplayName": "Remove Gameplay Effects with Tags",
          "RawDescription": "Remove Gameplay Effects with Tags:\r\nGameplayEffects that *have* tags in this container will be cleared upon effect application.",
          "RawShortDescription": "Remove Gameplay Effects with Tags:\r\nGameplayEffects that *have* tags in this container will be cleared upon effect application.",
          "Tooltip": "GameplayEffects that *have* tags in this container will be cleared upon effect application.",
          "Description": "Remove Gameplay Effects with Tags:\r\nGameplayEffects that *have* tags in this container will be cleared upon effect application.",
          "CPPType": "FInheritedTagContainer",
          "CPPTypeForwardDeclaration": "struct FInheritedTagContainer;",
          "Type": "FInheritedTagContainer",
          "DisplayType": "FInheritedTagContainer"
        },
        {
          "Name": "GrantedApplicationImmunityTags",
          "DisplayName": "GrantedApplicationImmunityTags",
          "RawDescription": "Granted Application Immunity Tags:\r\nGrants the owner immunity from these source tags.",
          "RawShortDescription": "Granted Application Immunity Tags:\r\nGrants the owner immunity from these source tags.",
          "Tooltip": "Grants the owner immunity from these source tags.",
          "Description": "Granted Application Immunity Tags:\r\nGrants the owner immunity from these source tags.",
          "CPPType": "FGameplayTagRequirements",
          "CPPTypeForwardDeclaration": "struct FGameplayTagRequirements;",
          "Type": "FGameplayTagRequirements",
          "DisplayType": "FGameplayTagRequirements"
        },
        {
          "Name": "GrantedApplicationImmunityQuery",
          "DisplayName": "Granted Application Immunity Query",
          "RawDescription": "Granted Application Immunity Query:\r\nGrants immunity to GameplayEffects that match this query. Queries are more powerful but slightly slower than GrantedApplicationImmunityTags.",
          "RawShortDescription": "Granted Application Immunity Query:\r\nGrants immunity to GameplayEffects that match this query. Queries are more powerful but slightly slower than GrantedApplicationImmunityTags.",
          "Tooltip": "Grants immunity to GameplayEffects that match this query. Queries are more powerful but slightly slower than GrantedApplicationImmunityTags.",
          "Description": "Granted Application Immunity Query:\r\nGrants immunity to GameplayEffects that match this query. Queries are more powerful but slightly slower than GrantedApplicationImmunityTags.",
          "CPPType": "FGameplayEffectQuery",
          "CPPTypeForwardDeclaration": "struct FGameplayEffectQuery;",
          "Type": "FGameplayEffectQuery",
          "DisplayType": "FGameplayEffectQuery"
        },
        {
          "Name": "RemoveGameplayEffectQuery",
          "DisplayName": "Remove Gameplay Effect Query",
          "RawDescription": "Remove Gameplay Effect Query:\r\nOn Application of an effect, any active effects with this this query that matches against the added effect will be removed. Queries are more powerful but slightly slower than RemoveGameplayEffectsWithTags.",
          "RawShortDescription": "Remove Gameplay Effect Query:\r\nOn Application of an effect, any active effects with this this query that matches against the added effect will be removed. Queries are more powerful but slightly slower than RemoveGameplayEffectsWithTags.",
          "Tooltip": "On Application of an effect, any active effects with this this query that matches against the added effect will be removed. Queries are more powerful but slightly slower than RemoveGameplayEffectsWithTags.",
          "Description": "Remove Gameplay Effect Query:\r\nOn Application of an effect, any active effects with this this query that matches against the added effect will be removed. Queries are more powerful but slightly slower than RemoveGameplayEffectsWithTags.",
          "CPPType": "FGameplayEffectQuery",
          "CPPTypeForwardDeclaration": "struct FGameplayEffectQuery;",
          "Type": "FGameplayEffectQuery",
          "DisplayType": "FGameplayEffectQuery"
        },
        {
          "Name": "StackingType",
          "DisplayName": "Stacking Type",
          "RawDescription": "Stacking Type:\r\nHow this GameplayEffect stacks with other instances of this same GameplayEffect",
          "RawShortDescription": "Stacking Type:\r\nHow this GameplayEffect stacks with other instances of this same GameplayEffect",
          "Tooltip": "How this GameplayEffect stacks with other instances of this same GameplayEffect",
          "Description": "Stacking Type:\r\nHow this GameplayEffect stacks with other instances of this same GameplayEffect",
          "CPPType": "EGameplayEffectStackingType",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectStackingType : uint8;",
          "Type": "EGameplayEffectStackingType",
          "DisplayType": "EGameplayEffectStackingType"
        },
        {
          "Name": "StackLimitCount",
          "DisplayName": "Stack Limit Count",
          "RawDescription": "Stack Limit Count:\r\nStack limit for StackingType",
          "RawShortDescription": "Stack Limit Count:\r\nStack limit for StackingType",
          "Tooltip": "Stack limit for StackingType",
          "Description": "Stack Limit Count:\r\nStack limit for StackingType",
          "CPPType": "int32",
          "CPPTypeForwardDeclaration": "",
          "Type": "int32",
          "DisplayType": "int32"
        },
        {
          "Name": "StackDurationRefreshPolicy",
          "DisplayName": "Stack Duration Refresh Policy",
          "RawDescription": "Stack Duration Refresh Policy:\r\nPolicy for how the effect duration should be refreshed while stacking",
          "RawShortDescription": "Stack Duration Refresh Policy:\r\nPolicy for how the effect duration should be refreshed while stacking",
          "Tooltip": "Policy for how the effect duration should be refreshed while stacking",
          "Description": "Stack Duration Refresh Policy:\r\nPolicy for how the effect duration should be refreshed while stacking",
          "CPPType": "EGameplayEffectStackingDurationPolicy",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectStackingDurationPolicy : uint8;",
          "Type": "EGameplayEffectStackingDurationPolicy",
          "DisplayType": "EGameplayEffectStackingDurationPolicy"
        },
        {
          "Name": "StackPeriodResetPolicy",
          "DisplayName": "Stack Period Reset Policy",
          "RawDescription": "Stack Period Reset Policy:\r\nPolicy for how the effect period should be reset (or not) while stacking",
          "RawShortDescription": "Stack Period Reset Policy:\r\nPolicy for how the effect period should be reset (or not) while stacking",
          "Tooltip": "Policy for how the effect period should be reset (or not) while stacking",
          "Description": "Stack Period Reset Policy:\r\nPolicy for how the effect period should be reset (or not) while stacking",
          "CPPType": "EGameplayEffectStackingPeriodPolicy",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectStackingPeriodPolicy : uint8;",
          "Type": "EGameplayEffectStackingPeriodPolicy",
          "DisplayType": "EGameplayEffectStackingPeriodPolicy"
        },
        {
          "Name": "StackExpirationPolicy",
          "DisplayName": "Stack Expiration Policy",
          "RawDescription": "Stack Expiration Policy:\r\nPolicy for how to handle duration expiring on this gameplay effect",
          "RawShortDescription": "Stack Expiration Policy:\r\nPolicy for how to handle duration expiring on this gameplay effect",
          "Tooltip": "Policy for how to handle duration expiring on this gameplay effect",
          "Description": "Stack Expiration Policy:\r\nPolicy for how to handle duration expiring on this gameplay effect",
          "CPPType": "EGameplayEffectStackingExpirationPolicy",
          "CPPTypeForwardDeclaration": "enum class EGameplayEffectStackingExpirationPolicy : uint8;",
          "Type": "EGameplayEffectStackingExpirationPolicy",
          "DisplayType": "EGameplayEffectStackingExpirationPolicy"
        },
        {
          "Name": "GrantedAbilities",
          "DisplayName": "Granted Abilities",
          "RawDescription": "Granted Abilities:\r\nGranted abilities",
          "RawShortDescription": "Granted Abilities:\r\nGranted abilities",
          "Tooltip": "Granted abilities",
          "Description": "Granted Abilities:\r\nGranted abilities",
          "CPPType": "TArray",
          "CPPTypeForwardDeclaration": "struct FGameplayAbilitySpecDef;",
          "Type": "TArray<FGameplayAbilitySpecDef>",
          "DisplayType": "Array of FGameplayAbilitySpecDef"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCUserWidget",
      "IncludePath": "UI/GSCUserWidget.h",
      "Description": "Base user widget class to inherit from for UMG that needs to interact with an Ability System Component.\n\nFor typical use case of Player HUD, use UGSCUWHud subclass instead.\n\nThis class provides an event based API to react to Ability System related events:\n\n- Attribute value change\n- Gameplay Tag change\n- Gameplay Effect added / removed\n- Cooldown start / expiration",
      "Properties": [
        {
          "Name": "OwnerActor",
          "DisplayName": "Owner Actor",
          "RawDescription": "Owner Actor",
          "RawShortDescription": "Owner Actor",
          "Tooltip": "",
          "Description": "Owner Actor",
          "CPPType": "AActor*",
          "CPPTypeForwardDeclaration": "class AActor;",
          "Type": "AActor*",
          "DisplayType": "AActor*"
        },
        {
          "Name": "OwnerCoreComponent",
          "DisplayName": "Owner Core Component",
          "RawDescription": "Owner Core Component",
          "RawShortDescription": "Owner Core Component",
          "Tooltip": "",
          "Description": "Owner Core Component",
          "CPPType": "UGSCCoreComponent*",
          "CPPTypeForwardDeclaration": "class UGSCCoreComponent;",
          "Type": "UGSCCoreComponent*",
          "DisplayType": "UGSCCoreComponent*"
        }
      ],
      "Events": [
        {
          "Name": "OnGameplayTagChange",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:OnGameplayTagChange",
          "DisplayName": "On Gameplay Tag Change",
          "RawDescription": "Event triggered by Companion Core Component whenever a tag is added or removed (but not if just count is increased. Only for 'new' and 'removed' events)",
          "RawShortDescription": "Event triggered by Companion Core Component whenever a tag is added or removed (but not if just count is increased. Only for 'new' and 'removed' events)",
          "Description": "Event triggered by Companion Core Component whenever a tag is added or removed (but not if just count is increased. Only for 'new' and 'removed' events)",
          "Image": "GASCompanion/img/GSCUserWidget_OnGameplayTagChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "GameplayTag",
              "DisplayName": "Gameplay Tag",
              "RawDescription": "Gameplay Tag",
              "RawShortDescription": "Gameplay Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "NewTagCount",
              "DisplayName": "New Tag Count",
              "RawDescription": "New Tag Count",
              "RawShortDescription": "New Tag Count",
              "Description": "",
              "CPPType": "int32",
              "CPPTypeForwardDeclaration": "",
              "Type": "int32",
              "DisplayType": "int32"
            }
          ]
        },
        {
          "Name": "OnGameplayEffectTimeChange",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:OnGameplayEffectTimeChange",
          "DisplayName": "On Gameplay Effect Time Change",
          "RawDescription": "Event triggered by Companion Core Component whenever a gameplay effect time is changed (for instance when duration is refreshed)",
          "RawShortDescription": "Event triggered by Companion Core Component whenever a gameplay effect time is changed (for instance when duration is refreshed)",
          "Description": "Event triggered by Companion Core Component whenever a gameplay effect time is changed (for instance when duration is refreshed)",
          "Image": "GASCompanion/img/GSCUserWidget_OnGameplayEffectTimeChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "AssetTags",
              "DisplayName": "Asset Tags",
              "RawDescription": "Asset Tags",
              "RawShortDescription": "Asset Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "GrantedTags",
              "DisplayName": "Granted Tags",
              "RawDescription": "Granted Tags",
              "RawShortDescription": "Granted Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "ActiveHandle",
              "DisplayName": "Active Handle",
              "RawDescription": "Active Handle",
              "RawShortDescription": "Active Handle",
              "Description": "",
              "CPPType": "FActiveGameplayEffectHandle",
              "CPPTypeForwardDeclaration": "struct FActiveGameplayEffectHandle;",
              "Type": "FActiveGameplayEffectHandle",
              "DisplayType": "FActiveGameplayEffectHandle"
            },
            {
              "Name": "NewStartTime",
              "DisplayName": "New Start Time",
              "RawDescription": "New Start Time",
              "RawShortDescription": "New Start Time",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "NewDuration",
              "DisplayName": "New Duration",
              "RawDescription": "New Duration",
              "RawShortDescription": "New Duration",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "OnGameplayEffectStackChange",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:OnGameplayEffectStackChange",
          "DisplayName": "On Gameplay Effect Stack Change",
          "RawDescription": "Event triggered by Companion Core Component whenever a gameplay effect is added / removed",
          "RawShortDescription": "Event triggered by Companion Core Component whenever a gameplay effect is added / removed",
          "Description": "Event triggered by Companion Core Component whenever a gameplay effect is added / removed",
          "Image": "GASCompanion/img/GSCUserWidget_OnGameplayEffectStackChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "AssetTags",
              "DisplayName": "Asset Tags",
              "RawDescription": "Asset Tags",
              "RawShortDescription": "Asset Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "GrantedTags",
              "DisplayName": "Granted Tags",
              "RawDescription": "Granted Tags",
              "RawShortDescription": "Granted Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "ActiveHandle",
              "DisplayName": "Active Handle",
              "RawDescription": "Active Handle",
              "RawShortDescription": "Active Handle",
              "Description": "",
              "CPPType": "FActiveGameplayEffectHandle",
              "CPPTypeForwardDeclaration": "struct FActiveGameplayEffectHandle;",
              "Type": "FActiveGameplayEffectHandle",
              "DisplayType": "FActiveGameplayEffectHandle"
            },
            {
              "Name": "NewStackCount",
              "DisplayName": "New Stack Count",
              "RawDescription": "New Stack Count",
              "RawShortDescription": "New Stack Count",
              "Description": "",
              "CPPType": "int32",
              "CPPTypeForwardDeclaration": "",
              "Type": "int32",
              "DisplayType": "int32"
            },
            {
              "Name": "OldStackCount",
              "DisplayName": "Old Stack Count",
              "RawDescription": "Old Stack Count",
              "RawShortDescription": "Old Stack Count",
              "Description": "",
              "CPPType": "int32",
              "CPPTypeForwardDeclaration": "",
              "Type": "int32",
              "DisplayType": "int32"
            }
          ]
        },
        {
          "Name": "OnGameplayEffectRemoved",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:OnGameplayEffectRemoved",
          "DisplayName": "On Gameplay Effect Removed",
          "RawDescription": "Event triggered by Companion Core Component whenever a gameplay effect is removed",
          "RawShortDescription": "Event triggered by Companion Core Component whenever a gameplay effect is removed",
          "Description": "Event triggered by Companion Core Component whenever a gameplay effect is removed",
          "Image": "GASCompanion/img/GSCUserWidget_OnGameplayEffectRemoved.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "AssetTags",
              "DisplayName": "Asset Tags",
              "RawDescription": "Asset Tags",
              "RawShortDescription": "Asset Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "GrantedTags",
              "DisplayName": "Granted Tags",
              "RawDescription": "Granted Tags",
              "RawShortDescription": "Granted Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "ActiveHandle",
              "DisplayName": "Active Handle",
              "RawDescription": "Active Handle",
              "RawShortDescription": "Active Handle",
              "Description": "",
              "CPPType": "FActiveGameplayEffectHandle",
              "CPPTypeForwardDeclaration": "struct FActiveGameplayEffectHandle;",
              "Type": "FActiveGameplayEffectHandle",
              "DisplayType": "FActiveGameplayEffectHandle"
            },
            {
              "Name": "EffectData",
              "DisplayName": "Effect Data",
              "RawDescription": "Effect Data",
              "RawShortDescription": "Effect Data",
              "Description": "",
              "CPPType": "FGSCGameplayEffectUIData",
              "CPPTypeForwardDeclaration": "struct FGSCGameplayEffectUIData;",
              "Type": "FGSCGameplayEffectUIData",
              "DisplayType": "FGSCGameplayEffectUIData"
            }
          ]
        },
        {
          "Name": "OnGameplayEffectAdded",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:OnGameplayEffectAdded",
          "DisplayName": "On Gameplay Effect Added",
          "RawDescription": "Event triggered by Companion Core Component whenever a gameplay effect is added",
          "RawShortDescription": "Event triggered by Companion Core Component whenever a gameplay effect is added",
          "Description": "Event triggered by Companion Core Component whenever a gameplay effect is added",
          "Image": "GASCompanion/img/GSCUserWidget_OnGameplayEffectAdded.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "AssetTags",
              "DisplayName": "Asset Tags",
              "RawDescription": "Asset Tags",
              "RawShortDescription": "Asset Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "GrantedTags",
              "DisplayName": "Granted Tags",
              "RawDescription": "Granted Tags",
              "RawShortDescription": "Granted Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "ActiveHandle",
              "DisplayName": "Active Handle",
              "RawDescription": "Active Handle",
              "RawShortDescription": "Active Handle",
              "Description": "",
              "CPPType": "FActiveGameplayEffectHandle",
              "CPPTypeForwardDeclaration": "struct FActiveGameplayEffectHandle;",
              "Type": "FActiveGameplayEffectHandle",
              "DisplayType": "FActiveGameplayEffectHandle"
            },
            {
              "Name": "EffectData",
              "DisplayName": "Effect Data",
              "RawDescription": "Effect Data",
              "RawShortDescription": "Effect Data",
              "Description": "",
              "CPPType": "FGSCGameplayEffectUIData",
              "CPPTypeForwardDeclaration": "struct FGSCGameplayEffectUIData;",
              "Type": "FGSCGameplayEffectUIData",
              "DisplayType": "FGSCGameplayEffectUIData"
            }
          ]
        },
        {
          "Name": "OnCooldownStart",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:OnCooldownStart",
          "DisplayName": "On Cooldown Start",
          "RawDescription": "Event triggered by Companion Core component when an ability with a valid cooldown is committed and cooldown is applied",
          "RawShortDescription": "Event triggered by Companion Core component when an ability with a valid cooldown is committed and cooldown is applied",
          "Description": "Event triggered by Companion Core component when an ability with a valid cooldown is committed and cooldown is applied",
          "Image": "GASCompanion/img/GSCUserWidget_OnCooldownStart.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "",
              "CPPType": "UGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "UGameplayAbility*",
              "DisplayType": "UGameplayAbility*"
            },
            {
              "Name": "CooldownTags",
              "DisplayName": "Cooldown Tags",
              "RawDescription": "Cooldown Tags",
              "RawShortDescription": "Cooldown Tags",
              "Description": "",
              "CPPType": "FGameplayTagContainer",
              "CPPTypeForwardDeclaration": "struct FGameplayTagContainer;",
              "Type": "FGameplayTagContainer",
              "DisplayType": "FGameplayTagContainer"
            },
            {
              "Name": "TimeRemaining",
              "DisplayName": "Time Remaining",
              "RawDescription": "Time Remaining",
              "RawShortDescription": "Time Remaining",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "Duration",
              "DisplayName": "Duration",
              "RawDescription": "Duration",
              "RawShortDescription": "Duration",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "OnCooldownEnd",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:OnCooldownEnd",
          "DisplayName": "On Cooldown End",
          "RawDescription": "Event triggered by Companion Core Component when a cooldown gameplay tag is removed, meaning cooldown expired",
          "RawShortDescription": "Event triggered by Companion Core Component when a cooldown gameplay tag is removed, meaning cooldown expired",
          "Description": "Event triggered by Companion Core Component when a cooldown gameplay tag is removed, meaning cooldown expired",
          "Image": "GASCompanion/img/GSCUserWidget_OnCooldownEnd.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "Ability",
              "DisplayName": "Ability",
              "RawDescription": "Ability",
              "RawShortDescription": "Ability",
              "Description": "",
              "CPPType": "UGameplayAbility*",
              "CPPTypeForwardDeclaration": "class UGameplayAbility;",
              "Type": "UGameplayAbility*",
              "DisplayType": "UGameplayAbility*"
            },
            {
              "Name": "CooldownTag",
              "DisplayName": "Cooldown Tag",
              "RawDescription": "Cooldown Tag",
              "RawShortDescription": "Cooldown Tag",
              "Description": "",
              "CPPType": "FGameplayTag",
              "CPPTypeForwardDeclaration": "struct FGameplayTag;",
              "Type": "FGameplayTag",
              "DisplayType": "FGameplayTag"
            },
            {
              "Name": "Duration",
              "DisplayName": "Duration",
              "RawDescription": "Duration",
              "RawShortDescription": "Duration",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "OnAttributeChange",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:OnAttributeChange",
          "DisplayName": "On Attribute Change",
          "RawDescription": "Event triggered whenever an attribute value is changed on Owner Actor's ASC",
          "RawShortDescription": "Event triggered whenever an attribute value is changed on Owner Actor's ASC",
          "Description": "Event triggered whenever an attribute value is changed on Owner Actor's ASC",
          "Image": "GASCompanion/img/GSCUserWidget_OnAttributeChange.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": [
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            },
            {
              "Name": "NewValue",
              "DisplayName": "New Value",
              "RawDescription": "New Value",
              "RawShortDescription": "New Value",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            },
            {
              "Name": "OldValue",
              "DisplayName": "Old Value",
              "RawDescription": "Old Value",
              "RawShortDescription": "Old Value",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "OnAbilitySystemInitialized",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:OnAbilitySystemInitialized",
          "DisplayName": "On Ability System Initialized",
          "RawDescription": "Event triggered when this widget has been initialized with a valid ASC.\n\nRun initialization logic that depends on Ability System here. (like setting initial state for user widgets based on attributes value)",
          "RawShortDescription": "Event triggered when this widget has been initialized with a valid ASC.\n\nRun initialization logic that depends on Ability System here. (like setting initial state for user widgets based on attributes value)",
          "Description": "Event triggered when this widget has been initialized with a valid ASC.\n\nRun initialization logic that depends on Ability System here. (like setting initial state for user widgets based on attributes value)",
          "Image": "GASCompanion/img/GSCUserWidget_OnAbilitySystemInitialized.png",
          "Flags": {
            "BlueprintCallable": false,
            "BlueprintPure": false,
            "BlueprintEvent": true
          },
          "Parameters": []
        }
      ],
      "Functions": [
        {
          "Name": "SetOwnerActor",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:SetOwnerActor",
          "DisplayName": "Set Owner Actor",
          "RawDescription": "Initialize or update references to owner actor and additional actor components (such as AbilitySystemComponent) and cache them for this instance of user widget.",
          "RawShortDescription": "Initialize or update references to owner actor and additional actor components (such as AbilitySystemComponent) and cache them for this instance of user widget.",
          "Description": "Initialize or update references to owner actor and additional actor components (such as AbilitySystemComponent) and cache them for this instance of user widget.",
          "Image": "GASCompanion/img/GSCUserWidget_SetOwnerActor.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Actor",
              "DisplayName": "Actor",
              "RawDescription": "Actor",
              "RawShortDescription": "Actor",
              "Description": "",
              "CPPType": "AActor*",
              "CPPTypeForwardDeclaration": "class AActor;",
              "Type": "AActor*",
              "DisplayType": "AActor*"
            }
          ]
        },
        {
          "Name": "InitializeWithAbilitySystem",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:InitializeWithAbilitySystem",
          "DisplayName": "Initialize with Ability System",
          "RawDescription": "Runs initialization logic for this UserWidget related to interactions with Ability System Component.\n\nSetup AbilitySystemComponent delegates to react to various events.\n\nUsually called from NativeConstruct, but exposed there if other classes needs to run initialization logic again to update references.",
          "RawShortDescription": "Runs initialization logic for this UserWidget related to interactions with Ability System Component.\n\nSetup AbilitySystemComponent delegates to react to various events.\n\nUsually called from NativeConstruct, but exposed there if other classes needs to run initialization logic again to update references.",
          "Description": "Runs initialization logic for this UserWidget related to interactions with Ability System Component.\n\nSetup AbilitySystemComponent delegates to react to various events.\n\nUsually called from NativeConstruct, but exposed there if other classes needs to run initialization logic again to update references.",
          "Image": "GASCompanion/img/GSCUserWidget_InitializeWithAbilitySystem.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "AbilitySystemComponent",
              "DisplayName": "Ability System Component",
              "RawDescription": "Ability System Component",
              "RawShortDescription": "Ability System Component",
              "Description": "",
              "CPPType": "UAbilitySystemComponent*",
              "CPPTypeForwardDeclaration": "class UAbilitySystemComponent;",
              "Type": "UAbilitySystemComponent*",
              "DisplayType": "UAbilitySystemComponent*"
            }
          ]
        },
        {
          "Name": "GetPercentForAttributes",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:GetPercentForAttributes",
          "DisplayName": "Get Percent for Attributes",
          "RawDescription": "Helper function to return percentage from Attribute / MaxAttribute",
          "RawShortDescription": "Helper function to return percentage from Attribute / MaxAttribute",
          "Description": "Helper function to return percentage from Attribute / MaxAttribute",
          "Image": "GASCompanion/img/GSCUserWidget_GetPercentForAttributes.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            },
            {
              "Name": "MaxAttribute",
              "DisplayName": "Max Attribute",
              "RawDescription": "Max Attribute",
              "RawShortDescription": "Max Attribute",
              "Description": "",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "float",
            "CPPTypeForwardDeclaration": "",
            "Type": "float",
            "DisplayType": "float"
          }
        },
        {
          "Name": "GetOwningCoreComponent",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:GetOwningCoreComponent",
          "DisplayName": "Get Owning Core Component",
          "RawDescription": "Returns reference to OwnerCoreComponent for this user widget, if it has been initialized.",
          "RawShortDescription": "Returns reference to OwnerCoreComponent for this user widget, if it has been initialized.",
          "Description": "Returns reference to OwnerCoreComponent for this user widget, if it has been initialized.",
          "Image": "GASCompanion/img/GSCUserWidget_GetOwningCoreComponent.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "UGSCCoreComponent*",
            "CPPTypeForwardDeclaration": "class UGSCCoreComponent;",
            "Type": "UGSCCoreComponent*",
            "DisplayType": "UGSCCoreComponent*"
          }
        },
        {
          "Name": "GetOwningActor",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:GetOwningActor",
          "DisplayName": "Get Owning Actor",
          "RawDescription": "Returns reference to OwnerActor for this user widget, if it has been initialized.",
          "RawShortDescription": "Returns reference to OwnerActor for this user widget, if it has been initialized.",
          "Description": "Returns reference to OwnerActor for this user widget, if it has been initialized.",
          "Image": "GASCompanion/img/GSCUserWidget_GetOwningActor.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "AActor*",
            "CPPTypeForwardDeclaration": "class AActor;",
            "Type": "AActor*",
            "DisplayType": "AActor*"
          }
        },
        {
          "Name": "GetOwningAbilitySystemComponent",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:GetOwningAbilitySystemComponent",
          "DisplayName": "Get Owning Ability System Component",
          "RawDescription": "Returns reference to AbilitySystemComponent for this user widget, if it has been initialized.",
          "RawShortDescription": "Returns reference to AbilitySystemComponent for this user widget, if it has been initialized.",
          "Description": "Returns reference to AbilitySystemComponent for this user widget, if it has been initialized.",
          "Image": "GASCompanion/img/GSCUserWidget_GetOwningAbilitySystemComponent.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "UAbilitySystemComponent*",
            "CPPTypeForwardDeclaration": "class UAbilitySystemComponent;",
            "Type": "UAbilitySystemComponent*",
            "DisplayType": "UAbilitySystemComponent*"
          }
        },
        {
          "Name": "GetAttributeValue",
          "FullName": "Function /Script/GASCompanion.GSCUserWidget:GetAttributeValue",
          "DisplayName": "Get Attribute Value",
          "RawDescription": "Returns the current value of an attribute (base value) from owning actor Ability System (if it has any). That is, the value of the attribute with no stateful modifiers",
          "RawShortDescription": "Returns the current value of an attribute (base value) from owning actor Ability System (if it has any). That is, the value of the attribute with no stateful modifiers",
          "Description": "Returns the current value of an attribute (base value) from owning actor Ability System (if it has any). That is, the value of the attribute with no stateful modifiers",
          "Image": "GASCompanion/img/GSCUserWidget_GetAttributeValue.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": true,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Attribute",
              "DisplayName": "Attribute",
              "RawDescription": "Attribute",
              "RawShortDescription": "Attribute",
              "Description": "",
              "CPPType": "FGameplayAttribute",
              "CPPTypeForwardDeclaration": "struct FGameplayAttribute;",
              "Type": "FGameplayAttribute",
              "DisplayType": "FGameplayAttribute"
            }
          ],
          "ReturnValue": {
            "Name": "ReturnValue",
            "DisplayName": "Return Value",
            "RawDescription": "Return Value",
            "RawShortDescription": "Return Value",
            "Description": "",
            "CPPType": "float",
            "CPPTypeForwardDeclaration": "",
            "Type": "float",
            "DisplayType": "float"
          }
        }
      ]
    },
    {
      "Name": "GSCUWDebugAbilityQueue",
      "IncludePath": "UI/GSCUWDebugAbilityQueue.h",
      "Description": "GSCUWDebug Ability Queue",
      "Properties": [
        {
          "Name": "ClearFromMontageDelay",
          "DisplayName": "Clear from Montage Delay",
          "RawDescription": "Clear from Montage Delay:\r\nThe amount of time (in seconds) that \"From Montage\" rows stay on screen",
          "RawShortDescription": "Clear from Montage Delay:\r\nThe amount of time (in seconds) that \"From Montage\" rows stay on screen",
          "Tooltip": "The amount of time (in seconds) that \"From Montage\" rows stay on screen",
          "Description": "Clear from Montage Delay:\r\nThe amount of time (in seconds) that \"From Montage\" rows stay on screen",
          "CPPType": "float",
          "CPPTypeForwardDeclaration": "",
          "Type": "float",
          "DisplayType": "float"
        },
        {
          "Name": "AbilityQueueEnabledText",
          "DisplayName": "Ability Queue Enabled Text",
          "RawDescription": "Ability Queue Enabled Text",
          "RawShortDescription": "Ability Queue Enabled Text",
          "Tooltip": "",
          "Description": "Ability Queue Enabled Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "AbilityQueueOpenedText",
          "DisplayName": "Ability Queue Opened Text",
          "RawDescription": "Ability Queue Opened Text",
          "RawShortDescription": "Ability Queue Opened Text",
          "Tooltip": "",
          "Description": "Ability Queue Opened Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "CurrentQueuedAbilityText",
          "DisplayName": "Current Queued Ability Text",
          "RawDescription": "Current Queued Ability Text",
          "RawShortDescription": "Current Queued Ability Text",
          "Tooltip": "",
          "Description": "Current Queued Ability Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "AllowAllAbilitiesText",
          "DisplayName": "Allow All Abilities Text",
          "RawDescription": "Allow All Abilities Text",
          "RawShortDescription": "Allow All Abilities Text",
          "Tooltip": "",
          "Description": "Allow All Abilities Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "AllowedAbilityTemplateText",
          "DisplayName": "Allowed Ability Template Text",
          "RawDescription": "Allowed Ability Template Text:\r\nConvenience TextBlock that serves as a \"template\" for allowed abilities row,\nso that we can customize its styling in Blueprints (font size, color, etc.)",
          "RawShortDescription": "Allowed Ability Template Text:\r\nConvenience TextBlock that serves as a \"template\" for allowed abilities row,\nso that we can customize its styling in Blueprints (font size, color, etc.)",
          "Tooltip": "Convenience TextBlock that serves as a \"template\" for allowed abilities row,\nso that we can customize its styling in Blueprints (font size, color, etc.)",
          "Description": "Allowed Ability Template Text:\r\nConvenience TextBlock that serves as a \"template\" for allowed abilities row,\nso that we can customize its styling in Blueprints (font size, color, etc.)",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "AbilityQueueFromMontageTemplateText",
          "DisplayName": "Ability Queue from Montage Template Text",
          "RawDescription": "Ability Queue from Montage Template Text:\r\nConvenience TextBlock that serves as a \"template\" for ability queue from montages row,\nso that we can customize its styling in Blueprints (font size, color, etc.)",
          "RawShortDescription": "Ability Queue from Montage Template Text:\r\nConvenience TextBlock that serves as a \"template\" for ability queue from montages row,\nso that we can customize its styling in Blueprints (font size, color, etc.)",
          "Tooltip": "Convenience TextBlock that serves as a \"template\" for ability queue from montages row,\nso that we can customize its styling in Blueprints (font size, color, etc.)",
          "Description": "Ability Queue from Montage Template Text:\r\nConvenience TextBlock that serves as a \"template\" for ability queue from montages row,\nso that we can customize its styling in Blueprints (font size, color, etc.)",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "AllowedAbilitiesBox",
          "DisplayName": "Allowed Abilities Box",
          "RawDescription": "Allowed Abilities Box",
          "RawShortDescription": "Allowed Abilities Box",
          "Tooltip": "",
          "Description": "Allowed Abilities Box",
          "CPPType": "UVerticalBox*",
          "CPPTypeForwardDeclaration": "class UVerticalBox;",
          "Type": "UVerticalBox*",
          "DisplayType": "UVerticalBox*"
        },
        {
          "Name": "AbilityQueueFromMontagesBox",
          "DisplayName": "Ability Queue from Montages Box",
          "RawDescription": "Ability Queue from Montages Box",
          "RawShortDescription": "Ability Queue from Montages Box",
          "Tooltip": "",
          "Description": "Ability Queue from Montages Box",
          "CPPType": "UVerticalBox*",
          "CPPTypeForwardDeclaration": "class UVerticalBox;",
          "Type": "UVerticalBox*",
          "DisplayType": "UVerticalBox*"
        },
        {
          "Name": "AbilityQueueFromMontagesPanel",
          "DisplayName": "Ability Queue from Montages Panel",
          "RawDescription": "Ability Queue from Montages Panel",
          "RawShortDescription": "Ability Queue from Montages Panel",
          "Tooltip": "",
          "Description": "Ability Queue from Montages Panel",
          "CPPType": "UCanvasPanel*",
          "CPPTypeForwardDeclaration": "class UCanvasPanel;",
          "Type": "UCanvasPanel*",
          "DisplayType": "UCanvasPanel*"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCUWDebugComboWidget",
      "IncludePath": "UI/GSCUWDebugComboWidget.h",
      "Description": "GSCUWDebug Combo Widget",
      "Properties": [
        {
          "Name": "ComboWindowOpenedText",
          "DisplayName": "Combo Window Opened Text",
          "RawDescription": "Combo Window Opened Text",
          "RawShortDescription": "Combo Window Opened Text",
          "Tooltip": "",
          "Description": "Combo Window Opened Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "ShouldTriggerComboText",
          "DisplayName": "Should Trigger Combo Text",
          "RawDescription": "Should Trigger Combo Text",
          "RawShortDescription": "Should Trigger Combo Text",
          "Tooltip": "",
          "Description": "Should Trigger Combo Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "RequestTriggerComboText",
          "DisplayName": "Request Trigger Combo Text",
          "RawDescription": "Request Trigger Combo Text",
          "RawShortDescription": "Request Trigger Combo Text",
          "Tooltip": "",
          "Description": "Request Trigger Combo Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "NextComboAbilityActivatedText",
          "DisplayName": "Next Combo Ability Activated Text",
          "RawDescription": "Next Combo Ability Activated Text",
          "RawShortDescription": "Next Combo Ability Activated Text",
          "Tooltip": "",
          "Description": "Next Combo Ability Activated Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "ComboIndexText",
          "DisplayName": "Combo Index Text",
          "RawDescription": "Combo Index Text",
          "RawShortDescription": "Combo Index Text",
          "Tooltip": "",
          "Description": "Combo Index Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        }
      ],
      "Events": [],
      "Functions": []
    },
    {
      "Name": "GSCUWHud",
      "IncludePath": "UI/GSCUWHud.h",
      "Description": "Base user widget class to inherit from for UMG that needs to interact with an Ability System Component.\n\nSuitable to use for typical case of Player HUD. Initialization happens automatically on NativeConstruct by setting up\nowner actor based on Owning Player controller (when Widget is created from Blueprint, the Owning Player pin)\n\nIf you'd like to use a user widget with a Widget Component, use UGSCUserWidget instead and manually invoke InitializeWithAbilitySystem().\n\nThe other main difference with UGSCUserWidget is that this class also defines widget optional binding for\nHealth / Stamina / Mana attributes from UGSCAttributeSet.",
      "Properties": [
        {
          "Name": "HealthText",
          "DisplayName": "Health Text",
          "RawDescription": "Health Text",
          "RawShortDescription": "Health Text",
          "Tooltip": "",
          "Description": "Health Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "HealthProgressBar",
          "DisplayName": "Health Progress Bar",
          "RawDescription": "Health Progress Bar",
          "RawShortDescription": "Health Progress Bar",
          "Tooltip": "",
          "Description": "Health Progress Bar",
          "CPPType": "UProgressBar*",
          "CPPTypeForwardDeclaration": "class UProgressBar;",
          "Type": "UProgressBar*",
          "DisplayType": "UProgressBar*"
        },
        {
          "Name": "StaminaText",
          "DisplayName": "Stamina Text",
          "RawDescription": "Stamina Text",
          "RawShortDescription": "Stamina Text",
          "Tooltip": "",
          "Description": "Stamina Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "StaminaProgressBar",
          "DisplayName": "Stamina Progress Bar",
          "RawDescription": "Stamina Progress Bar",
          "RawShortDescription": "Stamina Progress Bar",
          "Tooltip": "",
          "Description": "Stamina Progress Bar",
          "CPPType": "UProgressBar*",
          "CPPTypeForwardDeclaration": "class UProgressBar;",
          "Type": "UProgressBar*",
          "DisplayType": "UProgressBar*"
        },
        {
          "Name": "ManaText",
          "DisplayName": "Mana Text",
          "RawDescription": "Mana Text",
          "RawShortDescription": "Mana Text",
          "Tooltip": "",
          "Description": "Mana Text",
          "CPPType": "UTextBlock*",
          "CPPTypeForwardDeclaration": "class UTextBlock;",
          "Type": "UTextBlock*",
          "DisplayType": "UTextBlock*"
        },
        {
          "Name": "ManaProgressBar",
          "DisplayName": "Mana Progress Bar",
          "RawDescription": "Mana Progress Bar",
          "RawShortDescription": "Mana Progress Bar",
          "Tooltip": "",
          "Description": "Mana Progress Bar",
          "CPPType": "UProgressBar*",
          "CPPTypeForwardDeclaration": "class UProgressBar;",
          "Type": "UProgressBar*",
          "DisplayType": "UProgressBar*"
        }
      ],
      "Events": [],
      "Functions": [
        {
          "Name": "SetStaminaPercentage",
          "FullName": "Function /Script/GASCompanion.GSCUWHud:SetStaminaPercentage",
          "DisplayName": "Set Stamina Percentage",
          "RawDescription": "Updates bound health progress bar with the new percent",
          "RawShortDescription": "Updates bound health progress bar with the new percent",
          "Description": "Updates bound health progress bar with the new percent",
          "Image": "GASCompanion/img/GSCUWHud_SetStaminaPercentage.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "StaminaPercentage",
              "DisplayName": "Stamina Percentage",
              "RawDescription": "Stamina Percentage",
              "RawShortDescription": "Stamina Percentage",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "SetStamina",
          "FullName": "Function /Script/GASCompanion.GSCUWHud:SetStamina",
          "DisplayName": "Set Stamina",
          "RawDescription": "Updates bound stamina widgets to reflect the new stamina change",
          "RawShortDescription": "Updates bound stamina widgets to reflect the new stamina change",
          "Description": "Updates bound stamina widgets to reflect the new stamina change",
          "Image": "GASCompanion/img/GSCUWHud_SetStamina.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Stamina",
              "DisplayName": "Stamina",
              "RawDescription": "Stamina",
              "RawShortDescription": "Stamina",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "SetMaxStamina",
          "FullName": "Function /Script/GASCompanion.GSCUWHud:SetMaxStamina",
          "DisplayName": "Set Max Stamina",
          "RawDescription": "Updates bound stamina widgets to reflect the new max stamina change",
          "RawShortDescription": "Updates bound stamina widgets to reflect the new max stamina change",
          "Description": "Updates bound stamina widgets to reflect the new max stamina change",
          "Image": "GASCompanion/img/GSCUWHud_SetMaxStamina.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "MaxStamina",
              "DisplayName": "Max Stamina",
              "RawDescription": "Max Stamina",
              "RawShortDescription": "Max Stamina",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "SetMaxMana",
          "FullName": "Function /Script/GASCompanion.GSCUWHud:SetMaxMana",
          "DisplayName": "Set Max Mana",
          "RawDescription": "Updates bound mana widgets to reflect the new max mana change",
          "RawShortDescription": "Updates bound mana widgets to reflect the new max mana change",
          "Description": "Updates bound mana widgets to reflect the new max mana change",
          "Image": "GASCompanion/img/GSCUWHud_SetMaxMana.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "MaxMana",
              "DisplayName": "Max Mana",
              "RawDescription": "Max Mana",
              "RawShortDescription": "Max Mana",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "SetMaxHealth",
          "FullName": "Function /Script/GASCompanion.GSCUWHud:SetMaxHealth",
          "DisplayName": "Set Max Health",
          "RawDescription": "Updates bound health widgets to reflect the new max health change",
          "RawShortDescription": "Updates bound health widgets to reflect the new max health change",
          "Description": "Updates bound health widgets to reflect the new max health change",
          "Image": "GASCompanion/img/GSCUWHud_SetMaxHealth.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "MaxHealth",
              "DisplayName": "Max Health",
              "RawDescription": "Max Health",
              "RawShortDescription": "Max Health",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "SetManaPercentage",
          "FullName": "Function /Script/GASCompanion.GSCUWHud:SetManaPercentage",
          "DisplayName": "Set Mana Percentage",
          "RawDescription": "Updates bound mana progress bar with the new percent",
          "RawShortDescription": "Updates bound mana progress bar with the new percent",
          "Description": "Updates bound mana progress bar with the new percent",
          "Image": "GASCompanion/img/GSCUWHud_SetManaPercentage.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "ManaPercentage",
              "DisplayName": "Mana Percentage",
              "RawDescription": "Mana Percentage",
              "RawShortDescription": "Mana Percentage",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "SetMana",
          "FullName": "Function /Script/GASCompanion.GSCUWHud:SetMana",
          "DisplayName": "Set Mana",
          "RawDescription": "Updates bound mana widgets to reflect the new mana change",
          "RawShortDescription": "Updates bound mana widgets to reflect the new mana change",
          "Description": "Updates bound mana widgets to reflect the new mana change",
          "Image": "GASCompanion/img/GSCUWHud_SetMana.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Mana",
              "DisplayName": "Mana",
              "RawDescription": "Mana",
              "RawShortDescription": "Mana",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "SetHealthPercentage",
          "FullName": "Function /Script/GASCompanion.GSCUWHud:SetHealthPercentage",
          "DisplayName": "Set Health Percentage",
          "RawDescription": "Updates bound stamina progress bar with the new percent",
          "RawShortDescription": "Updates bound stamina progress bar with the new percent",
          "Description": "Updates bound stamina progress bar with the new percent",
          "Image": "GASCompanion/img/GSCUWHud_SetHealthPercentage.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "HealthPercentage",
              "DisplayName": "Health Percentage",
              "RawDescription": "Health Percentage",
              "RawShortDescription": "Health Percentage",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "SetHealth",
          "FullName": "Function /Script/GASCompanion.GSCUWHud:SetHealth",
          "DisplayName": "Set Health",
          "RawDescription": "Updates bound health widgets to reflect the new health change",
          "RawShortDescription": "Updates bound health widgets to reflect the new health change",
          "Description": "Updates bound health widgets to reflect the new health change",
          "Image": "GASCompanion/img/GSCUWHud_SetHealth.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": [
            {
              "Name": "Health",
              "DisplayName": "Health",
              "RawDescription": "Health",
              "RawShortDescription": "Health",
              "Description": "",
              "CPPType": "float",
              "CPPTypeForwardDeclaration": "",
              "Type": "float",
              "DisplayType": "float"
            }
          ]
        },
        {
          "Name": "InitFromCharacter",
          "FullName": "Function /Script/GASCompanion.GSCUWHud:InitFromCharacter",
          "DisplayName": "Init from Character",
          "RawDescription": "Init widget with attributes from owner character *",
          "RawShortDescription": "Init widget with attributes from owner character *",
          "Description": "Init widget with attributes from owner character *",
          "Image": "GASCompanion/img/GSCUWHud_InitFromCharacter.png",
          "Flags": {
            "BlueprintCallable": true,
            "BlueprintPure": false,
            "BlueprintEvent": false
          },
          "Parameters": []
        }
      ]
    }
  ]
}